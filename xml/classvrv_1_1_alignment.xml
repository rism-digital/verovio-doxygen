<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classvrv_1_1_alignment" kind="class" language="C++" prot="public">
    <compoundname>vrv::Alignment</compoundname>
    <basecompoundref refid="classvrv_1_1_object" prot="public" virt="non-virtual">vrv::Object</basecompoundref>
    <includes refid="horizontalaligner_8h" local="no">horizontalaligner.h</includes>
      <sectiondef kind="user-defined">
      <header>Constructors, destructors, reset methods</header>
      <description><para>Reset method reset all attribute classes </para>
</description>
      <memberdef kind="function" id="classvrv_1_1_alignment_1a4c02b09d436d667982a8c50dcb03c6b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vrv::Alignment::Alignment</definition>
        <argsstring>()</argsstring>
        <name>Alignment</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/verovio/verovio/include/vrv/horizontalaligner.h" line="75" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classvrv_1_1_alignment_1a7a64c1f1a0c13505f4150192da2a4115" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vrv::Alignment::Alignment</definition>
        <argsstring>(double time, AlignmentType type=ALIGNMENT_DEFAULT)</argsstring>
        <name>Alignment</name>
        <param>
          <type>double</type>
          <declname>time</declname>
        </param>
        <param>
          <type>AlignmentType</type>
          <declname>type</declname>
          <defval>ALIGNMENT_DEFAULT</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/verovio/verovio/include/vrv/horizontalaligner.h" line="76" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classvrv_1_1_alignment_1ac34d76c9e71df51687df4400b32a9da3" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual vrv::Alignment::~Alignment</definition>
        <argsstring>()</argsstring>
        <name>~Alignment</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/verovio/verovio/include/vrv/horizontalaligner.h" line="77" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classvrv_1_1_alignment_1ad43591d11620170af7123f2e6ccc18e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void vrv::Alignment::Reset</definition>
        <argsstring>() override</argsstring>
        <name>Reset</name>
        <reimplements refid="classvrv_1_1_object_1acdbfa3602b2a05ed4c7ba41c77f92b7e">Reset</reimplements>
        <briefdescription>
<para>Reset the object, that is 1) removing all childs and 2) resetting all attributes. </para>
        </briefdescription>
        <detaileddescription>
<para>The method is virtual, so <emphasis>always</emphasis> call the parent in the method overriding it. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/verovio/verovio/include/vrv/horizontalaligner.h" line="78" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Set and get the xRel value of the alignment</header>
      <memberdef kind="function" id="classvrv_1_1_alignment_1ace45fe11ad8e9befcdaea18ecc2cf5ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vrv::Alignment::SetXRel</definition>
        <argsstring>(int xRel)</argsstring>
        <name>SetXRel</name>
        <param>
          <type>int</type>
          <declname>xRel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/verovio/verovio/include/vrv/horizontalaligner.h" line="95" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classvrv_1_1_alignment_1a7c472c8d3a8acf0a5dbf48aca473655e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int vrv::Alignment::GetXRel</definition>
        <argsstring>() const</argsstring>
        <name>GetXRel</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/verovio/verovio/include/vrv/horizontalaligner.h" line="96" column="9" bodyfile="/home/runner/work/verovio/verovio/include/vrv/horizontalaligner.h" bodystart="96" bodyend="96"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Set and get the time value of the alignment</header>
      <memberdef kind="function" id="classvrv_1_1_alignment_1a51972727e9ef02059b5d6aa4718de290" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vrv::Alignment::SetTime</definition>
        <argsstring>(double time)</argsstring>
        <name>SetTime</name>
        <param>
          <type>double</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/verovio/verovio/include/vrv/horizontalaligner.h" line="103" column="10" bodyfile="/home/runner/work/verovio/verovio/include/vrv/horizontalaligner.h" bodystart="103" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="classvrv_1_1_alignment_1aa23ca5d6feda8b0c8d61d6d74c4d39f4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double vrv::Alignment::GetTime</definition>
        <argsstring>() const</argsstring>
        <name>GetTime</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/verovio/verovio/include/vrv/horizontalaligner.h" line="104" column="12" bodyfile="/home/runner/work/verovio/verovio/include/vrv/horizontalaligner.h" bodystart="104" bodyend="104"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Set and get the type of the alignment</header>
      <memberdef kind="function" id="classvrv_1_1_alignment_1aa5ca7ecc63865e44151b4331faf43a05" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vrv::Alignment::SetType</definition>
        <argsstring>(AlignmentType type)</argsstring>
        <name>SetType</name>
        <param>
          <type>AlignmentType</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/verovio/verovio/include/vrv/horizontalaligner.h" line="118" column="10" bodyfile="/home/runner/work/verovio/verovio/include/vrv/horizontalaligner.h" bodystart="118" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="classvrv_1_1_alignment_1ace5b196a887793320b1461e32d721bb9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>AlignmentType</type>
        <definition>AlignmentType vrv::Alignment::GetType</definition>
        <argsstring>() const</argsstring>
        <name>GetType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/verovio/verovio/include/vrv/horizontalaligner.h" line="119" column="19" bodyfile="/home/runner/work/verovio/verovio/include/vrv/horizontalaligner.h" bodystart="119" bodyend="119"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="classvrv_1_1_alignment_1a1e317b58f08e922e04da6c672ba2a0a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classvrv_1_1_alignment_reference" kindref="compound">AlignmentReference</ref> *</type>
        <definition>AlignmentReference* vrv::Alignment::GetReferenceWithElement</definition>
        <argsstring>(const LayerElement *element, int staffN=VRV_UNSET)</argsstring>
        <name>GetReferenceWithElement</name>
        <param>
          <type>const <ref refid="classvrv_1_1_layer_element" kindref="compound">LayerElement</ref> *</type>
          <declname>element</declname>
        </param>
        <param>
          <type>int</type>
          <declname>staffN</declname>
          <defval>VRV_UNSET</defval>
        </param>
        <briefdescription>
<para>Return the <ref refid="classvrv_1_1_alignment_reference" kindref="compound">AlignmentReference</ref> holding the element. </para>
        </briefdescription>
        <detaileddescription>
<para>If staffN is provided, uses the AlignmentReference-&gt;GetN() to accelerate the search. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/verovio/verovio/include/vrv/horizontalaligner.h" line="162" column="24"/>
      </memberdef>
      <memberdef kind="function" id="classvrv_1_1_alignment_1aab2220cffed4bd29bab46fe6d6158e14" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classvrv_1_1_alignment_reference" kindref="compound">AlignmentReference</ref> *</type>
        <definition>const AlignmentReference* vrv::Alignment::GetReferenceWithElement</definition>
        <argsstring>(const LayerElement *element, int staffN=VRV_UNSET) const</argsstring>
        <name>GetReferenceWithElement</name>
        <param>
          <type>const <ref refid="classvrv_1_1_layer_element" kindref="compound">LayerElement</ref> *</type>
          <declname>element</declname>
        </param>
        <param>
          <type>int</type>
          <declname>staffN</declname>
          <defval>VRV_UNSET</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/verovio/verovio/include/vrv/horizontalaligner.h" line="163" column="30"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="classvrv_1_1_alignment_1affc4399bfe85f4fcb885b172c75b4bb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>FunctorCode</type>
        <definition>FunctorCode vrv::Alignment::Accept</definition>
        <argsstring>(Functor &amp;functor) override</argsstring>
        <name>Accept</name>
        <reimplements refid="classvrv_1_1_object_1a4fe6d153925502ceb462193169a74891">Accept</reimplements>
        <param>
          <type><ref refid="classvrv_1_1_functor" kindref="compound">Functor</ref> &amp;</type>
          <declname>functor</declname>
        </param>
        <briefdescription>
<para><ref refid="classvrv_1_1_interface" kindref="compound">Interface</ref> for class functor visitation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/verovio/verovio/include/vrv/horizontalaligner.h" line="216" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classvrv_1_1_alignment_1a731c59e691c0c8b144e9b3793ffd2954" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>FunctorCode</type>
        <definition>FunctorCode vrv::Alignment::Accept</definition>
        <argsstring>(ConstFunctor &amp;functor) const override</argsstring>
        <name>Accept</name>
        <reimplements refid="classvrv_1_1_object_1a159b4bb92475586050e3ffdb3a7d5459">Accept</reimplements>
        <param>
          <type><ref refid="classvrv_1_1_const_functor" kindref="compound">ConstFunctor</ref> &amp;</type>
          <declname>functor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/verovio/verovio/include/vrv/horizontalaligner.h" line="217" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classvrv_1_1_alignment_1a32c1e1c67e7b0245b2406a4f89f8e133" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>FunctorCode</type>
        <definition>FunctorCode vrv::Alignment::AcceptEnd</definition>
        <argsstring>(Functor &amp;functor) override</argsstring>
        <name>AcceptEnd</name>
        <reimplements refid="classvrv_1_1_object_1ad93bf90a3a3a2955970a5b4c05fde748">AcceptEnd</reimplements>
        <param>
          <type><ref refid="classvrv_1_1_functor" kindref="compound">Functor</ref> &amp;</type>
          <declname>functor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/verovio/verovio/include/vrv/horizontalaligner.h" line="218" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classvrv_1_1_alignment_1ad0b036d330a309380589740052aa94ff" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>FunctorCode</type>
        <definition>FunctorCode vrv::Alignment::AcceptEnd</definition>
        <argsstring>(ConstFunctor &amp;functor) const override</argsstring>
        <name>AcceptEnd</name>
        <reimplements refid="classvrv_1_1_object_1a38c9de93620af8ace7f1832e387c22dc">AcceptEnd</reimplements>
        <param>
          <type><ref refid="classvrv_1_1_const_functor" kindref="compound">ConstFunctor</ref> &amp;</type>
          <declname>functor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/verovio/verovio/include/vrv/horizontalaligner.h" line="219" column="17"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classvrv_1_1_alignment_1a2344f0b20a9591cbe9c0f47a3ff6c4d3" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int vrv::Alignment::m_xRel</definition>
        <argsstring></argsstring>
        <name>m_xRel</name>
        <briefdescription>
<para>Stores the position relative to the measure. </para>
        </briefdescription>
        <detaileddescription>
<para>This is instanciated by the <ref refid="classvrv_1_1_calc_alignment_x_pos_functor" kindref="compound">CalcAlignmentXPosFunctor</ref>. It takes into account a non-linear according to the time interval with the previous Alignement </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/verovio/verovio/include/vrv/horizontalaligner.h" line="238" column="9" bodyfile="/home/runner/work/verovio/verovio/include/vrv/horizontalaligner.h" bodystart="238" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classvrv_1_1_alignment_1a0e2ec3f6e2514aa8975cee09bd7c1308" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double vrv::Alignment::m_time</definition>
        <argsstring></argsstring>
        <name>m_time</name>
        <briefdescription>
<para>Stores the time at which the alignment occur. </para>
        </briefdescription>
        <detaileddescription>
<para>It is set by the <ref refid="classvrv_1_1_align_horizontally_functor" kindref="compound">AlignHorizontallyFunctor</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/verovio/verovio/include/vrv/horizontalaligner.h" line="243" column="12" bodyfile="/home/runner/work/verovio/verovio/include/vrv/horizontalaligner.h" bodystart="243" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classvrv_1_1_alignment_1ac2f9262b11c83affdb26ac9d4b3303f7" prot="private" static="no" mutable="no">
        <type>AlignmentType</type>
        <definition>AlignmentType vrv::Alignment::m_type</definition>
        <argsstring></argsstring>
        <name>m_type</name>
        <briefdescription>
<para>Defines the type of alignment (see the AlignmentType enum). </para>
        </briefdescription>
        <detaileddescription>
<para>We have different types because we want some events occuring at the same time to be aligned separately. Examples: the clefs needs to be aligned together, key signatures together, and then the notes, even if all of them occur at time 0. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/verovio/verovio/include/vrv/horizontalaligner.h" line="251" column="19" bodyfile="/home/runner/work/verovio/verovio/include/vrv/horizontalaligner.h" bodystart="251" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classvrv_1_1_alignment_1a1071b7911f0f71654d0ab6ca37cbc60a" prot="private" static="no" mutable="no">
        <type>MapOfIntGraceAligners</type>
        <definition>MapOfIntGraceAligners vrv::Alignment::m_graceAligners</definition>
        <argsstring></argsstring>
        <name>m_graceAligners</name>
        <briefdescription>
<para>A map of GraceAligners if any. </para>
        </briefdescription>
        <detaileddescription>
<para>The <ref refid="classvrv_1_1_alignment" kindref="compound">Alignment</ref> owns them. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/verovio/verovio/include/vrv/horizontalaligner.h" line="256" column="27" bodyfile="/home/runner/work/verovio/verovio/include/vrv/horizontalaligner.h" bodystart="256" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classvrv_1_1_alignment_1a69dbbfa23611f87db7df6c03a26e52a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vrv::Alignment::ClearGraceAligners</definition>
        <argsstring>()</argsstring>
        <name>ClearGraceAligners</name>
        <briefdescription>
<para>Delete the grace aligners in the map. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/verovio/verovio/include/vrv/horizontalaligner.h" line="84" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classvrv_1_1_alignment_1afe1dce241b823edc3a32d57d159dd636" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool vrv::Alignment::IsSupportedChild</definition>
        <argsstring>(Object *object) override</argsstring>
        <name>IsSupportedChild</name>
        <reimplements refid="classvrv_1_1_object_1a06ffb8f7f251aeea862abe1f76b5599d">IsSupportedChild</reimplements>
        <param>
          <type><ref refid="classvrv_1_1_object" kindref="compound">Object</ref> *</type>
          <declname>object</declname>
        </param>
        <briefdescription>
<para>Override the method of adding <ref refid="classvrv_1_1_alignment_reference" kindref="compound">AlignmentReference</ref> children. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/verovio/verovio/include/vrv/horizontalaligner.h" line="89" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classvrv_1_1_alignment_1ab52c03819037b643b89612716dc4629a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vrv::Alignment::AddLayerElementRef</definition>
        <argsstring>(LayerElement *element)</argsstring>
        <name>AddLayerElementRef</name>
        <param>
          <type><ref refid="classvrv_1_1_layer_element" kindref="compound">LayerElement</ref> *</type>
          <declname>element</declname>
        </param>
        <briefdescription>
<para><ref refid="classvrv_1_1_add" kindref="compound">Add</ref> the <ref refid="classvrv_1_1_layer_element" kindref="compound">LayerElement</ref> to the appropriate <ref refid="classvrv_1_1_alignment_reference" kindref="compound">AlignmentReference</ref> child. </para>
        </briefdescription>
        <detaileddescription>
<para>Looks at the cross-staff situation (@staff or parent @staff). Return true if the <ref refid="classvrv_1_1_alignment_reference" kindref="compound">AlignmentReference</ref> holds more than one layer </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/verovio/verovio/include/vrv/horizontalaligner.h" line="112" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classvrv_1_1_alignment_1abea5738c5b4b494dbda993185dfd0e92" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vrv::Alignment::IsOfType</definition>
        <argsstring>(const std::vector&lt; AlignmentType &gt; &amp;types) const</argsstring>
        <name>IsOfType</name>
        <param>
          <type>const std::vector&lt; AlignmentType &gt; &amp;</type>
          <declname>types</declname>
        </param>
        <briefdescription>
<para>Check if the element is of on of the types. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/verovio/verovio/include/vrv/horizontalaligner.h" line="125" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classvrv_1_1_alignment_1a522317d835a28e60074f4b1c3ff38829" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vrv::Alignment::GetLeftRight</definition>
        <argsstring>(const std::vector&lt; int &gt; &amp;staffNs, int &amp;minLeft, int &amp;maxRight, const std::vector&lt; ClassId &gt; &amp;excludes={}) const</argsstring>
        <name>GetLeftRight</name>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>staffNs</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>minLeft</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>maxRight</declname>
        </param>
        <param>
          <type>const std::vector&lt; ClassId &gt; &amp;</type>
          <declname>excludes</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Retrieve the minimum left and maximum right position for the objects in an alignment. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns (-)VRV_UNSET if there is nothing for the staff specified. Internally uses <ref refid="classvrv_1_1_get_alignment_left_right_functor" kindref="compound">GetAlignmentLeftRightFunctor</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/verovio/verovio/include/vrv/horizontalaligner.h" line="132" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classvrv_1_1_alignment_1adb5ef63dfb7b5a6d2a17bfa3f55a4cce" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vrv::Alignment::GetLeftRight</definition>
        <argsstring>(int staffN, int &amp;minLeft, int &amp;maxRight, const std::vector&lt; ClassId &gt; &amp;excludes={}) const</argsstring>
        <name>GetLeftRight</name>
        <param>
          <type>int</type>
          <declname>staffN</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>minLeft</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>maxRight</declname>
        </param>
        <param>
          <type>const std::vector&lt; ClassId &gt; &amp;</type>
          <declname>excludes</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/verovio/verovio/include/vrv/horizontalaligner.h" line="134" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classvrv_1_1_alignment_1af3c2e284729d4ffbd49b07f18615a7d1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const MapOfIntGraceAligners &amp;</type>
        <definition>const MapOfIntGraceAligners&amp; vrv::Alignment::GetGraceAligners</definition>
        <argsstring>()</argsstring>
        <name>GetGraceAligners</name>
        <briefdescription>
<para>Return all GraceAligners for the <ref refid="classvrv_1_1_alignment" kindref="compound">Alignment</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/verovio/verovio/include/vrv/horizontalaligner.h" line="139" column="33" bodyfile="/home/runner/work/verovio/verovio/include/vrv/horizontalaligner.h" bodystart="139" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="classvrv_1_1_alignment_1ae806f6c44d2251c5adf385d21d22e2be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classvrv_1_1_grace_aligner" kindref="compound">GraceAligner</ref> *</type>
        <definition>GraceAligner* vrv::Alignment::GetGraceAligner</definition>
        <argsstring>(int id)</argsstring>
        <name>GetGraceAligner</name>
        <param>
          <type>int</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Returns the <ref refid="classvrv_1_1_grace_aligner" kindref="compound">GraceAligner</ref> for the <ref refid="classvrv_1_1_alignment" kindref="compound">Alignment</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Create it if necessary. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/verovio/verovio/include/vrv/horizontalaligner.h" line="145" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classvrv_1_1_alignment_1ae694154976e041cf41059ba6274b3d79" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vrv::Alignment::HasGraceAligner</definition>
        <argsstring>(int id) const</argsstring>
        <name>HasGraceAligner</name>
        <param>
          <type>int</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Returns true if the aligner has a <ref refid="classvrv_1_1_grace_aligner" kindref="compound">GraceAligner</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/verovio/verovio/include/vrv/horizontalaligner.h" line="150" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classvrv_1_1_alignment_1afb339241a9493a380e64c673f8adca84" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vrv::Alignment::PerformBoundingBoxAlignment</definition>
        <argsstring>() const</argsstring>
        <name>PerformBoundingBoxAlignment</name>
        <briefdescription>
<para>Returns true for <ref refid="classvrv_1_1_alignment" kindref="compound">Alignment</ref> for which we want to do bounding box alignment. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/verovio/verovio/include/vrv/horizontalaligner.h" line="155" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classvrv_1_1_alignment_1a0d0a0f0b03ae0a91009f7964b2b1d0ea" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; int, int &gt;</type>
        <definition>std::pair&lt;int, int&gt; vrv::Alignment::GetAlignmentTopBottom</definition>
        <argsstring>() const</argsstring>
        <name>GetAlignmentTopBottom</name>
        <briefdescription>
<para>Return pair of max and min Y value within alignment. </para>
        </briefdescription>
        <detaileddescription>
<para>Elements will be counted by alignment references. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/verovio/verovio/include/vrv/horizontalaligner.h" line="169" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classvrv_1_1_alignment_1a4513083acf6e7acbea6e894c3285750e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vrv::Alignment::HasAccidVerticalOverlap</definition>
        <argsstring>(const Alignment *otherAlignment, int staffN) const</argsstring>
        <name>HasAccidVerticalOverlap</name>
        <param>
          <type>const <ref refid="classvrv_1_1_alignment" kindref="compound">Alignment</ref> *</type>
          <declname>otherAlignment</declname>
        </param>
        <param>
          <type>int</type>
          <declname>staffN</declname>
        </param>
        <briefdescription>
<para>Return true if there is vertical overlap with accidentals from another alignment for specific staffN. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/verovio/verovio/include/vrv/horizontalaligner.h" line="174" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classvrv_1_1_alignment_1ad026c49cccdf5a3437d24c359ea8a4e5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vrv::Alignment::HasAlignmentReference</definition>
        <argsstring>(int staffN) const</argsstring>
        <name>HasAlignmentReference</name>
        <param>
          <type>int</type>
          <declname>staffN</declname>
        </param>
        <briefdescription>
<para>Return true if the alignment contains at least one reference with staffN. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/verovio/verovio/include/vrv/horizontalaligner.h" line="179" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classvrv_1_1_alignment_1a91732fc83a25ace6d09b87ff0afdfdb1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vrv::Alignment::HasTimestampOnly</definition>
        <argsstring>() const</argsstring>
        <name>HasTimestampOnly</name>
        <briefdescription>
<para>Return true if the alignment contains only references to timestamp attributes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/verovio/verovio/include/vrv/horizontalaligner.h" line="184" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classvrv_1_1_alignment_1a9083a3818a5d2797f74c0a8db54abd0d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int vrv::Alignment::HorizontalSpaceForDuration</definition>
        <argsstring>(double intervalTime, int maxActualDur, double spacingLinear, double spacingNonLinear)</argsstring>
        <name>HorizontalSpaceForDuration</name>
        <param>
          <type>double</type>
          <declname>intervalTime</declname>
        </param>
        <param>
          <type>int</type>
          <declname>maxActualDur</declname>
        </param>
        <param>
          <type>double</type>
          <declname>spacingLinear</declname>
        </param>
        <param>
          <type>double</type>
          <declname>spacingNonLinear</declname>
        </param>
        <briefdescription>
<para>Compute &quot;ideal&quot; horizontal space to allow for a given time interval, ignoring the need to keep consecutive symbols from overlapping or nearly overlapping: we assume spacing will be increased as necessary later to avoid that. </para>
        </briefdescription>
        <detaileddescription>
<para>For modern notation (CMN), ideal space is a function of time interval.</para>
<para>For a discussion of the way engravers determine spacing, see Elaine Gould, <emphasis>Behind Bars</emphasis>, p. 39. But we need something more flexible, because, for example: (1) We&apos;re interested in music with notes of very long duration: say, music in mensural notation containing longas or maximas; such music is usually not spaced by duration, but we support spacing by duration if the user wishes, and standard engravers&apos; rules would waste a lot of space. (2) For some purposes, spacing strictly proportional to duration is desirable. The most flexible solution might be to get ideal spacing from a user-definable table, but using a formula with parameters can come close and has other advantages. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/verovio/verovio/include/vrv/horizontalaligner.h" line="205" column="16"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classvrv_1_1_alignment_1a729bf605a4b3566175a47a087b591f42" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classvrv_1_1_alignment_reference" kindref="compound">AlignmentReference</ref> *</type>
        <definition>AlignmentReference* vrv::Alignment::GetAlignmentReference</definition>
        <argsstring>(int staffN)</argsstring>
        <name>GetAlignmentReference</name>
        <param>
          <type>int</type>
          <declname>staffN</declname>
        </param>
        <briefdescription>
<para>Retrieve the <ref refid="classvrv_1_1_alignment_reference" kindref="compound">AlignmentReference</ref> with staffN. </para>
        </briefdescription>
        <detaileddescription>
<para>Create and add it as child if not found. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/verovio/verovio/include/vrv/horizontalaligner.h" line="227" column="24"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This class stores an alignment position elements will point to. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>vrv::BoundingBox</label>
        <link refid="classvrv_1_1_bounding_box"/>
      </node>
      <node id="1">
        <label>vrv::Alignment</label>
        <link refid="classvrv_1_1_alignment"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>vrv::Object</label>
        <link refid="classvrv_1_1_object"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>vrv::BoundingBox</label>
        <link refid="classvrv_1_1_bounding_box"/>
      </node>
      <node id="1">
        <label>vrv::Alignment</label>
        <link refid="classvrv_1_1_alignment"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>vrv::Object</label>
        <link refid="classvrv_1_1_object"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/verovio/verovio/include/vrv/horizontalaligner.h" line="68" column="30" bodyfile="/home/runner/work/verovio/verovio/include/vrv/horizontalaligner.h" bodystart="68" bodyend="257"/>
    <listofallmembers>
      <member refid="classvrv_1_1_alignment_1affc4399bfe85f4fcb885b172c75b4bb8" prot="public" virt="virtual"><scope>vrv::Alignment</scope><name>Accept</name></member>
      <member refid="classvrv_1_1_alignment_1a731c59e691c0c8b144e9b3793ffd2954" prot="public" virt="virtual"><scope>vrv::Alignment</scope><name>Accept</name></member>
      <member refid="classvrv_1_1_alignment_1a32c1e1c67e7b0245b2406a4f89f8e133" prot="public" virt="virtual"><scope>vrv::Alignment</scope><name>AcceptEnd</name></member>
      <member refid="classvrv_1_1_alignment_1ad0b036d330a309380589740052aa94ff" prot="public" virt="virtual"><scope>vrv::Alignment</scope><name>AcceptEnd</name></member>
      <member refid="classvrv_1_1_object_1a2ab113f1faf62ee0332687ff981c0948" prot="public" virt="virtual"><scope>vrv::Alignment</scope><name>AddChild</name></member>
      <member refid="classvrv_1_1_alignment_1ab52c03819037b643b89612716dc4629a" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>AddLayerElementRef</name></member>
      <member refid="classvrv_1_1_alignment_1a4c02b09d436d667982a8c50dcb03c6b0" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>Alignment</name></member>
      <member refid="classvrv_1_1_alignment_1a7a64c1f1a0c13505f4150192da2a4115" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>Alignment</name></member>
      <member refid="classvrv_1_1_bounding_box_1ae9a22cf5d306abb22ff5f557e81bd9af" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>ApproximateBezierBoundingBox</name></member>
      <member refid="classvrv_1_1_bounding_box_1a3901a5e4a728b8f3450cce0e30f4bd29" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>ApproximateBezierExtrema</name></member>
      <member refid="classvrv_1_1_bounding_box_1aa466757865d8f747cbaaf232e3051177" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>ArePointsClose</name></member>
      <member refid="classvrv_1_1_object_1aa63ca849b67044acc38f89a6030b03c2" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>binaryComp</name></member>
      <member refid="classvrv_1_1_bounding_box_1a5601855899250709d9fa94f3c280aa72" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>BoundingBox</name></member>
      <member refid="classvrv_1_1_bounding_box_1a91eb3e2ee9b00bc764283fe1710e199b" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>CalcBezierAtPosition</name></member>
      <member refid="classvrv_1_1_bounding_box_1af1fdd065b198aafe35dcc7e5a35477ee" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>CalcBezierParamAtPosition</name></member>
      <member refid="classvrv_1_1_bounding_box_1ac09f7239af89a7e19ca235761589e150" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>CalcDeCasteljau</name></member>
      <member refid="classvrv_1_1_bounding_box_1a8008673c300accccc6dd7f10a2f12d45" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>CalcDistance</name></member>
      <member refid="classvrv_1_1_bounding_box_1af5401bb6040fe859bf6b7dc09c3c35b8" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>CalcLinearInterpolation</name></member>
      <member refid="classvrv_1_1_bounding_box_1acf2951ebea74c27b024916a4c96480a5" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>CalcPointAtBezier</name></member>
      <member refid="classvrv_1_1_bounding_box_1a80465f84c7190f8cb0a9765693376be2" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>CalcPositionAfterRotation</name></member>
      <member refid="classvrv_1_1_bounding_box_1a98f3d30610a0063965fcac7ec265ef27" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>CalcSlope</name></member>
      <member refid="classvrv_1_1_bounding_box_1a8fdd811aefcb373533b9cc2795aa04dd" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>CalcThickBezier</name></member>
      <member refid="classvrv_1_1_object_1a0af864d1b64a70d4ec8b62a520114bde" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>ClearChildren</name></member>
      <member refid="classvrv_1_1_alignment_1a69dbbfa23611f87db7df6c03a26e52a9" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>ClearGraceAligners</name></member>
      <member refid="classvrv_1_1_object_1a667b4432b8f9d9e92bfd34fe5c885099" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>ClearRelinquishedChildren</name></member>
      <member refid="classvrv_1_1_object_1ab2d363effa62d58a65f8aba1330c1379" prot="public" virt="virtual"><scope>vrv::Alignment</scope><name>Clone</name></member>
      <member refid="classvrv_1_1_object_1a2a1c4d0ed1a15f33637b03670c9aa98f" prot="public" virt="virtual"><scope>vrv::Alignment</scope><name>CloneReset</name></member>
      <member refid="classvrv_1_1_object_1a4bf38f527d70161c92062a2347b7c11e" prot="public" virt="virtual"><scope>vrv::Alignment</scope><name>CopyChildren</name></member>
      <member refid="classvrv_1_1_object_1aa24fba8bae1f0876567f564f98020966" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>DeleteChild</name></member>
      <member refid="classvrv_1_1_object_1acbb7a83e4ae3f1ba54bcd408dce066ee" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>DeleteChildrenByComparison</name></member>
      <member refid="classvrv_1_1_object_1ac846569894fc8b08083e5a8526ba5834" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>DetachChild</name></member>
      <member refid="classvrv_1_1_bounding_box_1a52ac837dc797c5f292c98ddb3f43a098" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>Encloses</name></member>
      <member refid="classvrv_1_1_object_1a24dd9389c537dda7046c097132ae9a9a" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>FillFlatList</name></member>
      <member refid="classvrv_1_1_object_1accb9f790ac276469b8ca9ce7ca5fe19d" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>FindAllDescendantsBetween</name></member>
      <member refid="classvrv_1_1_object_1a0d0ae6bac5470fbd7aa1555edf9341e5" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>FindAllDescendantsBetween</name></member>
      <member refid="classvrv_1_1_object_1a02c322a63d089b388e6b122598e88077" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>FindAllDescendantsByComparison</name></member>
      <member refid="classvrv_1_1_object_1adedb8c10d4e5f780f48aa1a45cf3d20f" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>FindAllDescendantsByComparison</name></member>
      <member refid="classvrv_1_1_object_1a56b1782e737b97f3e3145cbe08296b19" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>FindAllDescendantsByType</name></member>
      <member refid="classvrv_1_1_object_1a41ee471e72e60d72b177f9f97264fab3" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>FindAllDescendantsByType</name></member>
      <member refid="classvrv_1_1_object_1a75077fdacaa928e36fe20b90eaca7a7a" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>FindDescendantByComparison</name></member>
      <member refid="classvrv_1_1_object_1a948e6633d515f523bb38dad79af046b2" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>FindDescendantByComparison</name></member>
      <member refid="classvrv_1_1_object_1a00d5ad76400a768dd634806998166ab7" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>FindDescendantByID</name></member>
      <member refid="classvrv_1_1_object_1a71f296d277f77a37c45687f97a73bf83" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>FindDescendantByID</name></member>
      <member refid="classvrv_1_1_object_1a2c65f3e559db5add1055a45e60d44536" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>FindDescendantByType</name></member>
      <member refid="classvrv_1_1_object_1a6765a4a8d789472f5c0b1598440d675f" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>FindDescendantByType</name></member>
      <member refid="classvrv_1_1_object_1a95acdd9f46d55cf067b567ef11526b68" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>FindDescendantExtremeByComparison</name></member>
      <member refid="classvrv_1_1_object_1af9c8c3326a8eb6745bb1a94da8d76627" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>FindDescendantExtremeByComparison</name></member>
      <member refid="classvrv_1_1_object_1a5783461a8f5bee6d95391b86e0004ff4" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>FindNextChild</name></member>
      <member refid="classvrv_1_1_object_1a4750585ae6b8737aba3408fcc863dfeb" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>FindPreviousChild</name></member>
      <member refid="classvrv_1_1_object_1ab61ec322562aee0247f49e9fb008a448" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GenerateHashID</name></member>
      <member refid="classvrv_1_1_alignment_1a729bf605a4b3566175a47a087b591f42" prot="private" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetAlignmentReference</name></member>
      <member refid="classvrv_1_1_alignment_1a0d0a0f0b03ae0a91009f7964b2b1d0ea" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetAlignmentTopBottom</name></member>
      <member refid="classvrv_1_1_object_1a802e613f29ccc215de5768b4e6d0b9d0" prot="public" virt="virtual"><scope>vrv::Alignment</scope><name>GetAltSymInterface</name></member>
      <member refid="classvrv_1_1_object_1ac3fdcc01a8048f6758fd787d33ddef8a" prot="public" virt="virtual"><scope>vrv::Alignment</scope><name>GetAltSymInterface</name></member>
      <member refid="classvrv_1_1_object_1a9520082549d438647a7fc8b1126675b4" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetAncestors</name></member>
      <member refid="classvrv_1_1_object_1a323a71a1cb0b2a956e37c4e3da49a0fb" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetAncestors</name></member>
      <member refid="classvrv_1_1_object_1a6cadd7a0feb1425165258e599090f9f9" prot="public" virt="virtual"><scope>vrv::Alignment</scope><name>GetAreaPosInterface</name></member>
      <member refid="classvrv_1_1_object_1aa91dde17d5e02f9fb15441d175ec9ab1" prot="public" virt="virtual"><scope>vrv::Alignment</scope><name>GetAreaPosInterface</name></member>
      <member refid="classvrv_1_1_object_1aeb7e152a62704071901972bbfa06062c" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetAttributes</name></member>
      <member refid="classvrv_1_1_object_1a6d9d3ae387831fac891f903349348310" prot="public" virt="virtual"><scope>vrv::Alignment</scope><name>GetBeamDrawingInterface</name></member>
      <member refid="classvrv_1_1_object_1ab136df3273e12a93e3699ae62e9d2514" prot="public" virt="virtual"><scope>vrv::Alignment</scope><name>GetBeamDrawingInterface</name></member>
      <member refid="classvrv_1_1_bounding_box_1a3dbe5a481e20ab4d0d9fdd47708d1c2f" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetBezierThicknessCoefficient</name></member>
      <member refid="classvrv_1_1_bounding_box_1a91a7bb36d11f909e84caab997fb49c0c" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetBottomBy</name></member>
      <member refid="classvrv_1_1_bounding_box_1a5a9da745d928e71989c23eca8d4b77d7" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetBoundingBoxGlyph</name></member>
      <member refid="classvrv_1_1_bounding_box_1a2b025880f04cefa1cb37b7e6f8bfb8f1" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetBoundingBoxGlyphFontSize</name></member>
      <member refid="classvrv_1_1_object_1a41604299ea07255f348600609ef90c8b" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetChild</name></member>
      <member refid="classvrv_1_1_object_1a63a2dec6cb07702ae147ec3541d44496" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetChild</name></member>
      <member refid="classvrv_1_1_object_1a889936363e6eb4b03172c86219c275fc" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetChild</name></member>
      <member refid="classvrv_1_1_object_1ac42744411cd519011fe914f200f6e0f5" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetChild</name></member>
      <member refid="classvrv_1_1_object_1a96ae60d000961398754d5b22de89cc4e" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetChildCount</name></member>
      <member refid="classvrv_1_1_object_1a21704672a51a54150db818e2e14af2da" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetChildCount</name></member>
      <member refid="classvrv_1_1_object_1a5ebca520373bf015cd3b5667791b8334" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetChildCount</name></member>
      <member refid="classvrv_1_1_object_1a747b062af53580bf736f3c163cb6602a" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetChildIndex</name></member>
      <member refid="classvrv_1_1_object_1a65ebcdfcab707aacab9176303d4d3bf6" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetChildren</name></member>
      <member refid="classvrv_1_1_object_1a676255bd808b50dc0f18b863c3d37be8" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetChildren</name></member>
      <member refid="classvrv_1_1_object_1a6613607b9361b6cc4d568ce189ba9c32" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetChildrenForModification</name></member>
      <member refid="classvrv_1_1_object_1aab95929358aad8730f586319a3417264" prot="public" virt="virtual"><scope>vrv::Alignment</scope><name>GetClassId</name></member>
      <member refid="classvrv_1_1_object_1a85f5f4c2c61b31f3e0cfafccf6893dd3" prot="public" virt="virtual"><scope>vrv::Alignment</scope><name>GetClassName</name></member>
      <member refid="classvrv_1_1_object_1a65066ae5b40a4dc3aab9bf76abc57d36" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetClosingComment</name></member>
      <member refid="classvrv_1_1_object_1aa8a0722010e05e1e2cb04d90a9535cc4" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetComment</name></member>
      <member refid="classvrv_1_1_bounding_box_1a74fec7caf937bc6892cd0de8c1f29355" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetContentBottom</name></member>
      <member refid="classvrv_1_1_bounding_box_1a9a33f5750af51cfb292ff2a553744e2d" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetContentLeft</name></member>
      <member refid="classvrv_1_1_bounding_box_1a755302fda960358f076a3175783a5d78" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetContentRight</name></member>
      <member refid="classvrv_1_1_bounding_box_1a8343f2b84e7bb194cb9377c304703bba" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetContentTop</name></member>
      <member refid="classvrv_1_1_bounding_box_1ac2b3dff1054fee47d8d22c2183c4c346" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetContentX1</name></member>
      <member refid="classvrv_1_1_bounding_box_1aca490fbb8d4d5c0179e05f790e0e2951" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetContentX2</name></member>
      <member refid="classvrv_1_1_bounding_box_1afb681918250b5eceeab06a8752c794a0" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetContentY1</name></member>
      <member refid="classvrv_1_1_bounding_box_1a7d8f116f3c72430801e43fc9f1fb1e95" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetContentY2</name></member>
      <member refid="classvrv_1_1_bounding_box_1a26bfbd087c59e094696d2c0ff1fd89ea" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetCutOutBottom</name></member>
      <member refid="classvrv_1_1_bounding_box_1a341aeebe2fdd010ebf72aaf1c8760df3" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetCutOutLeft</name></member>
      <member refid="classvrv_1_1_bounding_box_1aff4fd28f86884cc8286be692e644521e" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetCutOutLeft</name></member>
      <member refid="classvrv_1_1_bounding_box_1abc3f8eacafe2bfb2becd732507f259ae" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetCutOutRight</name></member>
      <member refid="classvrv_1_1_bounding_box_1ab2703ccf19b57cc32f6e286748cc3e01" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetCutOutRight</name></member>
      <member refid="classvrv_1_1_bounding_box_1a81256810cab77e0d9fedf64fa858690f" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetCutOutTop</name></member>
      <member refid="classvrv_1_1_object_1a469db24aaa4907f5437576cb989fcdad" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetDescendantCount</name></member>
      <member refid="classvrv_1_1_object_1a6baacbb5e659f71a051d569b2c34ac07" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetDescendantIndex</name></member>
      <member refid="classvrv_1_1_object_1a4479cf2a953546ff59428752c479ec31" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetDocResources</name></member>
      <member refid="classvrv_1_1_object_1ac707920ee385b0c7bb52d4b0184e7e54" prot="public" virt="virtual"><scope>vrv::Alignment</scope><name>GetDrawingX</name></member>
      <member refid="classvrv_1_1_object_1a2b30e0834719af6134364237c5f78940" prot="public" virt="virtual"><scope>vrv::Alignment</scope><name>GetDrawingY</name></member>
      <member refid="classvrv_1_1_object_1a60120fd33bf1f7227c4dc2f6a9b265c7" prot="public" virt="virtual"><scope>vrv::Alignment</scope><name>GetDurationInterface</name></member>
      <member refid="classvrv_1_1_object_1ae6f71e6b9dc583db08e6d90edbfc8f48" prot="public" virt="virtual"><scope>vrv::Alignment</scope><name>GetDurationInterface</name></member>
      <member refid="classvrv_1_1_object_1a12c0e976636a155de9c58ead6cd743f8" prot="public" virt="virtual"><scope>vrv::Alignment</scope><name>GetFacsimileInterface</name></member>
      <member refid="classvrv_1_1_object_1ad0ecbf09c07a06496d3c025881ac7898" prot="public" virt="virtual"><scope>vrv::Alignment</scope><name>GetFacsimileInterface</name></member>
      <member refid="classvrv_1_1_object_1a4f539160a7684d67d0c4e01e5dd06c36" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetFirst</name></member>
      <member refid="classvrv_1_1_object_1abafdbeb5dae2dc78a285277fbb12006f" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetFirst</name></member>
      <member refid="classvrv_1_1_object_1a4124844dc62f3a263b5f2480a7c4a105" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetFirstAncestor</name></member>
      <member refid="classvrv_1_1_object_1a3c2a13430f342970d3a3cf8f029ba7f0" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetFirstAncestor</name></member>
      <member refid="classvrv_1_1_object_1a5ec4736caa32bf31168fd2ce62f21d0d" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetFirstAncestorInRange</name></member>
      <member refid="classvrv_1_1_object_1a4e9a608419295411e4f3cf4ea7fbf19f" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetFirstAncestorInRange</name></member>
      <member refid="classvrv_1_1_object_1a10fe05578ee7f669ca3591c5a2a3a428" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetFirstChildNot</name></member>
      <member refid="classvrv_1_1_object_1a7cde888c2a3a0af025cd706540d7333a" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetFirstChildNot</name></member>
      <member refid="classvrv_1_1_alignment_1ae806f6c44d2251c5adf385d21d22e2be" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetGraceAligner</name></member>
      <member refid="classvrv_1_1_alignment_1af3c2e284729d4ffbd49b07f18615a7d1" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetGraceAligners</name></member>
      <member refid="classvrv_1_1_object_1aef1d784524c2d3c60d0c0142d1a8ab53" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetID</name></member>
      <member refid="classvrv_1_1_object_1a2bfb8ee92dbd7e805de0aae51d07d534" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetIdx</name></member>
      <member refid="classvrv_1_1_object_1ad8f7812ad7bdfe96dda1eda108484955" prot="public" virt="virtual"><scope>vrv::Alignment</scope><name>GetInsertOrderFor</name></member>
      <member refid="classvrv_1_1_object_1afeda31a18e057eaa199a5a76d2a8cf78" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetInsertOrderForIn</name></member>
      <member refid="classvrv_1_1_object_1aa7382f9b787c517cf76a6ece195f7766" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetLast</name></member>
      <member refid="classvrv_1_1_object_1a31f762f07969b77792891fdbbc5176e4" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetLast</name></member>
      <member refid="classvrv_1_1_object_1a908d56fef5a5dd9b9808555ab4ea4daf" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetLastAncestorNot</name></member>
      <member refid="classvrv_1_1_object_1a7a014abead37ca3e27f827a5c3ae7434" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetLastAncestorNot</name></member>
      <member refid="classvrv_1_1_bounding_box_1af329372204a34520779e6b0d0596e8b9" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetLeftBy</name></member>
      <member refid="classvrv_1_1_alignment_1a522317d835a28e60074f4b1c3ff38829" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetLeftRight</name></member>
      <member refid="classvrv_1_1_alignment_1adb5ef63dfb7b5a6d2a17bfa3f55a4cce" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetLeftRight</name></member>
      <member refid="classvrv_1_1_object_1a817a55b73b4356214fecf01d9da87d26" prot="public" virt="virtual"><scope>vrv::Alignment</scope><name>GetLinkingInterface</name></member>
      <member refid="classvrv_1_1_object_1a71f584e3103c93a150d3a3f95a8cd6b6" prot="public" virt="virtual"><scope>vrv::Alignment</scope><name>GetLinkingInterface</name></member>
      <member refid="classvrv_1_1_object_1a776dc4f75ec176b5189ce8818a221bcf" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetMilestoneEnd</name></member>
      <member refid="classvrv_1_1_object_1ab2e351247e616a3f30eaf2e3d125f054" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetNext</name></member>
      <member refid="classvrv_1_1_object_1a0db530be167ba91d886764f066e63c2b" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetNext</name></member>
      <member refid="classvrv_1_1_object_1a3fda6549b288e139959f2e50355792e7" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetNext</name></member>
      <member refid="classvrv_1_1_object_1a8eaec660ff6955684042402e40ea3a99" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetNext</name></member>
      <member refid="classvrv_1_1_object_1ad2f81f683e9a94713b451395ff781627" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetParent</name></member>
      <member refid="classvrv_1_1_object_1a4e4858957b6d48a75bba2130939fe174" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetParent</name></member>
      <member refid="classvrv_1_1_object_1aace2a15227fa3db1f20b5acbb7f2b4d2" prot="public" virt="virtual"><scope>vrv::Alignment</scope><name>GetPitchInterface</name></member>
      <member refid="classvrv_1_1_object_1abe3b4b7b0763dc04d1c85fdb1d9a81e8" prot="public" virt="virtual"><scope>vrv::Alignment</scope><name>GetPitchInterface</name></member>
      <member refid="classvrv_1_1_object_1a32a7bc21b1323f31cb9d9e68686ce345" prot="public" virt="virtual"><scope>vrv::Alignment</scope><name>GetPlistInterface</name></member>
      <member refid="classvrv_1_1_object_1aa246db2175561352dd71e7d2925697bf" prot="public" virt="virtual"><scope>vrv::Alignment</scope><name>GetPlistInterface</name></member>
      <member refid="classvrv_1_1_object_1a68eb08599ac194e3dfc2c149e96db67a" prot="public" virt="virtual"><scope>vrv::Alignment</scope><name>GetPositionInterface</name></member>
      <member refid="classvrv_1_1_object_1a1125eeb9dfc51655c68758107cd616fe" prot="public" virt="virtual"><scope>vrv::Alignment</scope><name>GetPositionInterface</name></member>
      <member refid="classvrv_1_1_object_1a26a7c60cdf50a4072927aa671112f1f3" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetPrevious</name></member>
      <member refid="classvrv_1_1_object_1ad3b827c4f53d81386c192ce462f09b3e" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetPrevious</name></member>
      <member refid="classvrv_1_1_alignment_1a1e317b58f08e922e04da6c672ba2a0a1" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetReferenceWithElement</name></member>
      <member refid="classvrv_1_1_alignment_1aab2220cffed4bd29bab46fe6d6158e14" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetReferenceWithElement</name></member>
      <member refid="classvrv_1_1_bounding_box_1a2fe9d4e0cef41c270fe6683e5fbd8223" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetRightBy</name></member>
      <member refid="classvrv_1_1_object_1a36ae3be40fa20c6255a6003e5d56133f" prot="public" virt="virtual"><scope>vrv::Alignment</scope><name>GetScoreDefInterface</name></member>
      <member refid="classvrv_1_1_object_1af26b539ef3e271bc568bebff37c01a33" prot="public" virt="virtual"><scope>vrv::Alignment</scope><name>GetScoreDefInterface</name></member>
      <member refid="classvrv_1_1_bounding_box_1a7e55bc05f8dc9b3ff7768fe48c791d83" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetSelfBottom</name></member>
      <member refid="classvrv_1_1_bounding_box_1a2fb7e4b83e390c3cd436e3a73ddfa269" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetSelfLeft</name></member>
      <member refid="classvrv_1_1_bounding_box_1aaae2c8d3d80e7203585052862288f2d5" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetSelfRight</name></member>
      <member refid="classvrv_1_1_bounding_box_1a2e094936f23e6b9c044ccd28a3aa0681" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetSelfTop</name></member>
      <member refid="classvrv_1_1_bounding_box_1a588e6d63bc9e9d149dc6fdd784886a78" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetSelfX1</name></member>
      <member refid="classvrv_1_1_bounding_box_1a025b101dd81de0a3802ba5ac2a86f9c5" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetSelfX2</name></member>
      <member refid="classvrv_1_1_bounding_box_1ad958652328dd6762612727f064f56b3c" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetSelfY1</name></member>
      <member refid="classvrv_1_1_bounding_box_1a7ba0ddf13040f3747a7421232c9bc21d" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetSelfY2</name></member>
      <member refid="classvrv_1_1_object_1a8f790811faa78e214ba76d2a728fa8e5" prot="public" virt="virtual"><scope>vrv::Alignment</scope><name>GetStemmedDrawingInterface</name></member>
      <member refid="classvrv_1_1_object_1ab7545a6790428020dc60d6f65f50edb0" prot="public" virt="virtual"><scope>vrv::Alignment</scope><name>GetStemmedDrawingInterface</name></member>
      <member refid="classvrv_1_1_object_1ac2308546f247b47d6fdaaf0e90490fa5" prot="public" virt="virtual"><scope>vrv::Alignment</scope><name>GetTextDirInterface</name></member>
      <member refid="classvrv_1_1_object_1a3524d9d7b5a93fed82ad1a90812cfcdd" prot="public" virt="virtual"><scope>vrv::Alignment</scope><name>GetTextDirInterface</name></member>
      <member refid="classvrv_1_1_alignment_1aa23ca5d6feda8b0c8d61d6d74c4d39f4" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetTime</name></member>
      <member refid="classvrv_1_1_object_1a738ca662cfaa09bb0122966cb29b43c6" prot="public" virt="virtual"><scope>vrv::Alignment</scope><name>GetTimePointInterface</name></member>
      <member refid="classvrv_1_1_object_1af721a04d95924b4da05c2285f5b01e33" prot="public" virt="virtual"><scope>vrv::Alignment</scope><name>GetTimePointInterface</name></member>
      <member refid="classvrv_1_1_object_1a2ac1817c7492a51e6bb550f3002b32de" prot="public" virt="virtual"><scope>vrv::Alignment</scope><name>GetTimeSpanningInterface</name></member>
      <member refid="classvrv_1_1_object_1a93ba097fdba73b383a5aee0771e484d7" prot="public" virt="virtual"><scope>vrv::Alignment</scope><name>GetTimeSpanningInterface</name></member>
      <member refid="classvrv_1_1_bounding_box_1a9dae1c4940695c403ba67841512f94f3" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetTopBy</name></member>
      <member refid="classvrv_1_1_alignment_1ace5b196a887793320b1461e32d721bb9" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetType</name></member>
      <member refid="classvrv_1_1_bounding_box_1a6f1d1de5ac01ce1fe4cf43ed16b47e11" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetX1By</name></member>
      <member refid="classvrv_1_1_bounding_box_1a3a9666c33d5a4a7d01f4b159c128d6c5" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetX2By</name></member>
      <member refid="classvrv_1_1_alignment_1a7c472c8d3a8acf0a5dbf48aca473655e" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetXRel</name></member>
      <member refid="classvrv_1_1_bounding_box_1ad906e8632b28b1be81fa374ad2b5292e" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetY1By</name></member>
      <member refid="classvrv_1_1_bounding_box_1a242e2a41a61fb347b526a08fef162cdf" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>GetY2By</name></member>
      <member refid="classvrv_1_1_alignment_1a4513083acf6e7acbea6e894c3285750e" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>HasAccidVerticalOverlap</name></member>
      <member refid="classvrv_1_1_alignment_1ad026c49cccdf5a3437d24c359ea8a4e5" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>HasAlignmentReference</name></member>
      <member refid="classvrv_1_1_object_1a9020ecbd4da7cb50ed8ffa686eeae8e5" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>HasAttClass</name></member>
      <member refid="classvrv_1_1_object_1a07880f4ad709e37ca6b5483110905383" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>HasAttribute</name></member>
      <member refid="classvrv_1_1_object_1ad52c48d64fdb14dbc0a4dcf40aa87295" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>HasClosingComment</name></member>
      <member refid="classvrv_1_1_object_1a5d95d6ed5231e12c17d17868d337b218" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>HasComment</name></member>
      <member refid="classvrv_1_1_bounding_box_1a6cac2a9e7c863969d8e856807936574f" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>HasContentBB</name></member>
      <member refid="classvrv_1_1_bounding_box_1a3bde41712d93b9badf88b35ac1974503" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>HasContentHorizontalBB</name></member>
      <member refid="classvrv_1_1_bounding_box_1abe8bb676a5c670242888d9034daa5a22" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>HasContentVerticalBB</name></member>
      <member refid="classvrv_1_1_object_1a1f38d88b64a7f79bfea9303a16c1f556" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>HasDescendant</name></member>
      <member refid="classvrv_1_1_object_1ac9dd387934b8960b47b96a0c05bb1b84" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>HasEditorialContent</name></member>
      <member refid="classvrv_1_1_bounding_box_1a1dfd7207c5f8431bcb56c88b5c469992" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>HasEmptyBB</name></member>
      <member refid="classvrv_1_1_alignment_1ae694154976e041cf41059ba6274b3d79" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>HasGraceAligner</name></member>
      <member refid="classvrv_1_1_object_1a3eed2cd64bee454f550e6fa22995dafe" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>Hash</name></member>
      <member refid="classvrv_1_1_object_1a1639642ba9433617ec04608f2d2570bb" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>HasInterface</name></member>
      <member refid="classvrv_1_1_object_1ae0d0368a66d1c4b590b311a1a94eb717" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>HasNonEditorialContent</name></member>
      <member refid="classvrv_1_1_bounding_box_1a72744aa255a0d861577275366e711729" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>HasSelfBB</name></member>
      <member refid="classvrv_1_1_bounding_box_1a33e2d9c410be02f476ca19e0f063284c" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>HasSelfHorizontalBB</name></member>
      <member refid="classvrv_1_1_bounding_box_1a20afc38171ff613053a28a3530a66a05" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>HasSelfVerticalBB</name></member>
      <member refid="classvrv_1_1_alignment_1a91732fc83a25ace6d09b87ff0afdfdb1" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>HasTimestampOnly</name></member>
      <member refid="classvrv_1_1_bounding_box_1aee28c8f38335a02d395f132eac3174a2" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>HorizontalContentOverlap</name></member>
      <member refid="classvrv_1_1_bounding_box_1a0fdfa000c449d4c9b1de755dd1efff55" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>HorizontalLeftOverlap</name></member>
      <member refid="classvrv_1_1_bounding_box_1a7265ddc2845db5bc543200b037048a2e" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>HorizontalRightOverlap</name></member>
      <member refid="classvrv_1_1_bounding_box_1a363e14e29dcb72d6539a832921c538f9" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>HorizontalSelfOverlap</name></member>
      <member refid="classvrv_1_1_alignment_1a9083a3818a5d2797f74c0a8db54abd0d" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>HorizontalSpaceForDuration</name></member>
      <member refid="classvrv_1_1_object_1aaf1ba626f7c0d6be44373b6cfe29855f" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>InsertAfter</name></member>
      <member refid="classvrv_1_1_object_1a26dd6389f8b6ce5ff1cf9f0b779a0d14" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>InsertBefore</name></member>
      <member refid="classvrv_1_1_object_1ac14929dac6e5b5e699d16ba7fc258d9d" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>InsertChild</name></member>
      <member refid="classvrv_1_1_bounding_box_1a29d29a9aaa350b53bcf58dc32978b7f8" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>Intersects</name></member>
      <member refid="classvrv_1_1_bounding_box_1a89d4ebda89785d624cb43d1c45dbbbb2" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>Intersects</name></member>
      <member refid="classvrv_1_1_bounding_box_1af366b55a8e449a12d689acd9d35ae782" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>Is</name></member>
      <member refid="classvrv_1_1_bounding_box_1aaeb23e9d3064f863ef3857efef570a8f" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>Is</name></member>
      <member refid="classvrv_1_1_object_1af8ee73eca8e0a08ae535318c4462fad1" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>IsAttribute</name></member>
      <member refid="classvrv_1_1_object_1a24ff4e053bb15d8d893c9a1a6b2f9639" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>IsAttribute</name></member>
      <member refid="classvrv_1_1_object_1aab9a49af1e67891dcfd1b929a6d64aa9" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>IsControlElement</name></member>
      <member refid="classvrv_1_1_object_1a46776dd312ff3631580f9e0ff293d52e" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>IsEditorialElement</name></member>
      <member refid="classvrv_1_1_object_1a76f4663d1b09c5fe2b0c771eeb3f7d0e" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>IsExpansion</name></member>
      <member refid="classvrv_1_1_object_1a07dfe3de52f16cff12eefabe11c6cd96" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>IsExpansion</name></member>
      <member refid="classvrv_1_1_object_1a3b131f39c868a8a1e9b768bdc0eae811" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>IsFloatingObject</name></member>
      <member refid="classvrv_1_1_object_1a311186b3525f994471394fcc38bbcda8" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>IsLayerElement</name></member>
      <member refid="classvrv_1_1_object_1aa9ad841690ea5c7b3326d8863140a7f8" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>IsMilestoneElement</name></member>
      <member refid="classvrv_1_1_object_1a4eec6780edc930e49d9874c1036735a4" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>IsModified</name></member>
      <member refid="classvrv_1_1_alignment_1abea5738c5b4b494dbda993185dfd0e92" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>IsOfType</name></member>
      <member refid="classvrv_1_1_object_1a6fe6d0adbd0341a514fc3645039559fd" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>IsPageElement</name></member>
      <member refid="classvrv_1_1_object_1af8dd22cf22d58a6c606591b9fe14597d" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>IsPreOrdered</name></member>
      <member refid="classvrv_1_1_object_1ad507cfd401ea330cca65a4891b90da80" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>IsReferenceObject</name></member>
      <member refid="classvrv_1_1_object_1a5b19179d87ef32147c3d513fa735c07f" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>IsRunningElement</name></member>
      <member refid="classvrv_1_1_object_1a774acf3d4a93bd2e94451eeb1b883273" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>IsScoreDefElement</name></member>
      <member refid="classvrv_1_1_alignment_1afe1dce241b823edc3a32d57d159dd636" prot="public" virt="virtual"><scope>vrv::Alignment</scope><name>IsSupportedChild</name></member>
      <member refid="classvrv_1_1_object_1a334a7956ff32ade0704f4afdd74f37a6" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>IsSystemElement</name></member>
      <member refid="classvrv_1_1_object_1a958bf53eb4117b0438aa5ddb9264c1c8" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>IsTextElement</name></member>
      <member refid="classvrv_1_1_bounding_box_1a4961ebaf8f99abe31ee894345cd84a16" prot="protected" virt="non-virtual"><scope>vrv::Alignment</scope><name>m_cachedDrawingX</name></member>
      <member refid="classvrv_1_1_bounding_box_1a548baf7b854ef877313302670da5d0b8" prot="protected" virt="non-virtual"><scope>vrv::Alignment</scope><name>m_cachedDrawingY</name></member>
      <member refid="classvrv_1_1_alignment_1a1071b7911f0f71654d0ab6ca37cbc60a" prot="private" virt="non-virtual"><scope>vrv::Alignment</scope><name>m_graceAligners</name></member>
      <member refid="classvrv_1_1_alignment_1a0e2ec3f6e2514aa8975cee09bd7c1308" prot="private" virt="non-virtual"><scope>vrv::Alignment</scope><name>m_time</name></member>
      <member refid="classvrv_1_1_alignment_1ac2f9262b11c83affdb26ac9d4b3303f7" prot="private" virt="non-virtual"><scope>vrv::Alignment</scope><name>m_type</name></member>
      <member refid="classvrv_1_1_object_1a74ae0995caefb72a71445ba43fce0652" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>m_unsupported</name></member>
      <member refid="classvrv_1_1_alignment_1a2344f0b20a9591cbe9c0f47a3ff6c4d3" prot="private" virt="non-virtual"><scope>vrv::Alignment</scope><name>m_xRel</name></member>
      <member refid="classvrv_1_1_object_1a30996d1e8460f2110900b490425c16ec" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>Modify</name></member>
      <member refid="classvrv_1_1_object_1aa846e8099e10d6cf427e8255e4a62dd4" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>MoveChildrenFrom</name></member>
      <member refid="classvrv_1_1_object_1ac7063ea155c08f4e39e5c59b735f1d9e" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>MoveItselfTo</name></member>
      <member refid="classvrv_1_1_object_1ae10fe4f6d8a8b450b680f10cfe39a9cc" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>Object</name></member>
      <member refid="classvrv_1_1_object_1a98c0701bde5924c064607250d567883a" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>Object</name></member>
      <member refid="classvrv_1_1_object_1a79f4f653686b4f612283302ab443c1c8" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>Object</name></member>
      <member refid="classvrv_1_1_object_1a8be4ecf7908559751e728551718a8bfc" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>Object</name></member>
      <member refid="classvrv_1_1_object_1a6ad51ecc97faf69c8fa8432a780aed44" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>operator=</name></member>
      <member refid="classvrv_1_1_alignment_1afb339241a9493a380e64c673f8adca84" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>PerformBoundingBoxAlignment</name></member>
      <member refid="classvrv_1_1_object_1ab1b4dbc50eb6f628feea75d202a22e18" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>Process</name></member>
      <member refid="classvrv_1_1_object_1ac83fb39df04943815cd3a275d2924e16" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>Process</name></member>
      <member refid="classvrv_1_1_bounding_box_1a74c28d831f2e14aec44a848a961f8b42" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>RectBottomOverlap</name></member>
      <member refid="classvrv_1_1_bounding_box_1a414f972e6f1e4231d61acdd7329eb414" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>RectLeftOverlap</name></member>
      <member refid="classvrv_1_1_bounding_box_1a4802cf9706608398b887afd2ad3e1188" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>RectRightOverlap</name></member>
      <member refid="classvrv_1_1_bounding_box_1ae7003f6708e916b7640d4dda5a8a18ef" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>RectTopOverlap</name></member>
      <member refid="classvrv_1_1_object_1aa5bcd61a747583c6ed2b97039129df68" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>RegisterAttClass</name></member>
      <member refid="classvrv_1_1_object_1a172109ee605efdf2c2b23440adef333c" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>RegisterInterface</name></member>
      <member refid="classvrv_1_1_object_1a48ea7a78dfbdf0195235b56679924c76" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>Relinquish</name></member>
      <member refid="classvrv_1_1_object_1a84d8c0e7b117807cbecca85ca7695ce8" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>ReorderByXPos</name></member>
      <member refid="classvrv_1_1_object_1aba32b01b87b8f31455e68c77a3d8ee40" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>ReplaceChild</name></member>
      <member refid="classvrv_1_1_alignment_1ad43591d11620170af7123f2e6ccc18e2" prot="public" virt="virtual"><scope>vrv::Alignment</scope><name>Reset</name></member>
      <member refid="classvrv_1_1_bounding_box_1ae79b9324168608f36cb71c8ca4174220" prot="public" virt="virtual"><scope>vrv::Alignment</scope><name>ResetBoundingBox</name></member>
      <member refid="classvrv_1_1_object_1a859aecc00ab75fc7ed2f2780bc0a6a51" prot="public" virt="virtual"><scope>vrv::Alignment</scope><name>ResetCachedDrawingX</name></member>
      <member refid="classvrv_1_1_object_1ac5b28a8625980d057d6cad83dbd52e26" prot="public" virt="virtual"><scope>vrv::Alignment</scope><name>ResetCachedDrawingY</name></member>
      <member refid="classvrv_1_1_object_1a6a40859719b200dae8d65ee9d597bccd" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>ResetID</name></member>
      <member refid="classvrv_1_1_object_1a5d22ebda01e0b254c13d558f5ffdb098" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>ResetParent</name></member>
      <member refid="classvrv_1_1_object_1a86b033680370fc35b444ef74a55bca92" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>SaveObject</name></member>
      <member refid="classvrv_1_1_object_1aa8fa10c3b5d07eec119fe0d73aa9b6ab" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>SeedID</name></member>
      <member refid="classvrv_1_1_object_1a9bc335e3bc5405f5dbaae757b5629996" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>SetAsReferenceObject</name></member>
      <member refid="classvrv_1_1_bounding_box_1a7eccd9ca1e458dccab9c6b9fb7a24ec4" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>SetBoundingBoxGlyph</name></member>
      <member refid="classvrv_1_1_object_1af0db1dd88b7d2f6c9068934312ce86c8" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>SetClosingComment</name></member>
      <member refid="classvrv_1_1_object_1a3b47aa3445a48e681db41607cedcd4b4" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>SetComment</name></member>
      <member refid="classvrv_1_1_bounding_box_1ade8f7ad2283b156a2c7934c4055bd8bf" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>SetEmptyBB</name></member>
      <member refid="classvrv_1_1_object_1aa34da3a7092c0b6753c91459b52648b9" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>SetID</name></member>
      <member refid="classvrv_1_1_object_1a9f30aa6a8185b260943003a08980d376" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>SetParent</name></member>
      <member refid="classvrv_1_1_alignment_1a51972727e9ef02059b5d6aa4718de290" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>SetTime</name></member>
      <member refid="classvrv_1_1_alignment_1aa5ca7ecc63865e44151b4331faf43a05" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>SetType</name></member>
      <member refid="classvrv_1_1_alignment_1ace45fe11ad8e9befcdaea18ecc2cf5ca" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>SetXRel</name></member>
      <member refid="classvrv_1_1_bounding_box_1ab4d1764142c6881678dbfcaee124e38f" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>SolveCubicPolynomial</name></member>
      <member refid="classvrv_1_1_object_1a6c529b9574392b6c2baeaf8470e2a989" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>sortByUlx</name></member>
      <member refid="classvrv_1_1_object_1aa8caf0942b1ff1c02f6f8e879397ca21" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>SortChildren</name></member>
      <member refid="classvrv_1_1_object_1ac97807a0dabfdf0d1d483f7f3e9427f9" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>StableSort</name></member>
      <member refid="classvrv_1_1_object_1a3c91cd86fa79d2b64ae677f2b2a64e9d" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>SwapID</name></member>
      <member refid="classvrv_1_1_bounding_box_1a8cc083afb0d6f3a68d60fae9569645b8" prot="public" virt="virtual"><scope>vrv::Alignment</scope><name>UpdateContentBBoxX</name></member>
      <member refid="classvrv_1_1_bounding_box_1af90ec4f1a3393d9c89473f5a2b146b5b" prot="public" virt="virtual"><scope>vrv::Alignment</scope><name>UpdateContentBBoxY</name></member>
      <member refid="classvrv_1_1_bounding_box_1a5b5db30b70a0c954d37ae58e523dbead" prot="public" virt="virtual"><scope>vrv::Alignment</scope><name>UpdateSelfBBoxX</name></member>
      <member refid="classvrv_1_1_bounding_box_1a029f007d1150f88d906b318b17ecdccc" prot="public" virt="virtual"><scope>vrv::Alignment</scope><name>UpdateSelfBBoxY</name></member>
      <member refid="classvrv_1_1_bounding_box_1aeff55f50ac7cae031dfa289d422b77c0" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>VerticalBottomOverlap</name></member>
      <member refid="classvrv_1_1_bounding_box_1acdb36f4007fc88d79a81eed3b440c536" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>VerticalContentOverlap</name></member>
      <member refid="classvrv_1_1_bounding_box_1ab9bbe1447c1e512c9154825086f34aef" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>VerticalSelfOverlap</name></member>
      <member refid="classvrv_1_1_bounding_box_1aa4dda490e649a5c4817ef99853e0a3da" prot="public" virt="non-virtual"><scope>vrv::Alignment</scope><name>VerticalTopOverlap</name></member>
      <member refid="classvrv_1_1_alignment_1ac34d76c9e71df51687df4400b32a9da3" prot="public" virt="virtual"><scope>vrv::Alignment</scope><name>~Alignment</name></member>
      <member refid="classvrv_1_1_bounding_box_1a9f87f4407c2c8d88ab5e4eacfe1ac1f0" prot="public" virt="virtual"><scope>vrv::Alignment</scope><name>~BoundingBox</name></member>
      <member refid="classvrv_1_1_object_1a350424e9cf31d3b7d1bb5f5754944401" prot="public" virt="virtual"><scope>vrv::Alignment</scope><name>~Object</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
