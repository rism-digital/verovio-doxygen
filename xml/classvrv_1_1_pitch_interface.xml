<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classvrv_1_1_pitch_interface" kind="class" language="C++" prot="public">
    <compoundname>vrv::PitchInterface</compoundname>
    <basecompoundref refid="classvrv_1_1_interface" prot="public" virt="non-virtual">vrv::Interface</basecompoundref>
    <basecompoundref prot="public" virt="non-virtual">AttNoteGes</basecompoundref>
    <basecompoundref prot="public" virt="non-virtual">AttOctave</basecompoundref>
    <basecompoundref prot="public" virt="non-virtual">AttPitch</basecompoundref>
    <derivedcompoundref refid="classvrv_1_1_custos" prot="public" virt="non-virtual">vrv::Custos</derivedcompoundref>
    <derivedcompoundref refid="classvrv_1_1_key_accid" prot="public" virt="non-virtual">vrv::KeyAccid</derivedcompoundref>
    <derivedcompoundref refid="classvrv_1_1_nc" prot="public" virt="non-virtual">vrv::Nc</derivedcompoundref>
    <derivedcompoundref refid="classvrv_1_1_note" prot="public" virt="non-virtual">vrv::Note</derivedcompoundref>
    <includes refid="pitchinterface_8h" local="no">pitchinterface.h</includes>
      <sectiondef kind="user-defined">
      <header>Constructors, destructors, reset methods</header>
      <description><para>Reset method resets all attribute classes </para>
</description>
      <memberdef kind="function" id="classvrv_1_1_pitch_interface_1a4e00c45beb10eba31d98b5325151d8f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vrv::PitchInterface::PitchInterface</definition>
        <argsstring>()</argsstring>
        <name>PitchInterface</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/verovio/verovio/include/vrv/pitchinterface.h" line="35" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classvrv_1_1_pitch_interface_1aab83493ea7752c45e398ebfcea706928" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual vrv::PitchInterface::~PitchInterface</definition>
        <argsstring>()</argsstring>
        <name>~PitchInterface</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/verovio/verovio/include/vrv/pitchinterface.h" line="36" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classvrv_1_1_pitch_interface_1aadb1bc4e09bd2ea9686c06d75a077bb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void vrv::PitchInterface::Reset</definition>
        <argsstring>() override</argsstring>
        <name>Reset</name>
        <reimplements refid="classvrv_1_1_interface_1a5dac3707db3650101729ff5610bb6200">Reset</reimplements>
        <briefdescription>
<para>Virtual reset method. </para>
        </briefdescription>
        <detaileddescription>
<para>Needs to be overridden in child classes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/verovio/verovio/include/vrv/pitchinterface.h" line="37" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classvrv_1_1_pitch_interface_1ad5eb2bfb6682e72699fe4fb140a47350" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>InterfaceId</type>
        <definition>InterfaceId vrv::PitchInterface::IsInterface</definition>
        <argsstring>() const override</argsstring>
        <name>IsInterface</name>
        <reimplements refid="classvrv_1_1_interface_1a00a809d1924fd17cfdb6327179148f4d">IsInterface</reimplements>
        <briefdescription>
<para>Virtual method returning the InterfaceId of the interface. </para>
        </briefdescription>
        <detaileddescription>
<para>Needs to be overridden in child classes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/verovio/verovio/include/vrv/pitchinterface.h" line="38" column="17" bodyfile="/home/runner/work/verovio/verovio/include/vrv/pitchinterface.h" bodystart="38" bodyend="38"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classvrv_1_1_pitch_interface_1ab31f6dd5d225135f3b35f32ab2573d99" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vrv::PitchInterface::HasIdenticalPitchInterface</definition>
        <argsstring>(const PitchInterface *otherPitchInterface) const</argsstring>
        <name>HasIdenticalPitchInterface</name>
        <param>
          <type>const <ref refid="classvrv_1_1_pitch_interface" kindref="compound">PitchInterface</ref> *</type>
          <declname>otherPitchInterface</declname>
        </param>
        <briefdescription>
<para><ref refid="classvrv_1_1_interface" kindref="compound">Interface</ref> comparison operator. </para>
        </briefdescription>
        <detaileddescription>
<para>Checks if the <ref refid="classvrv_1_1_layer_element" kindref="compound">LayerElement</ref> has a <ref refid="classvrv_1_1_pitch_interface" kindref="compound">PitchInterface</ref> and compares attributes </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/verovio/verovio/include/vrv/pitchinterface.h" line="45" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classvrv_1_1_pitch_interface_1aa50e2d8637677e753a582083b7b8afb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vrv::PitchInterface::AdjustPitchByOffset</definition>
        <argsstring>(int pitchOffset)</argsstring>
        <name>AdjustPitchByOffset</name>
        <param>
          <type>int</type>
          <declname>pitchOffset</declname>
        </param>
        <briefdescription>
<para>Shift pname and octave by a certain number of steps. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/verovio/verovio/include/vrv/pitchinterface.h" line="50" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classvrv_1_1_pitch_interface_1a3f1089bfeddc84c7b3c31e3a239b4a76" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int vrv::PitchInterface::PitchDifferenceTo</definition>
        <argsstring>(const PitchInterface *pi) const</argsstring>
        <name>PitchDifferenceTo</name>
        <param>
          <type>const <ref refid="classvrv_1_1_pitch_interface" kindref="compound">PitchInterface</ref> *</type>
          <declname>pi</declname>
        </param>
        <briefdescription>
<para>Get steps between calling object and parameter. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns calling pitch minus parameter pitch. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/verovio/verovio/include/vrv/pitchinterface.h" line="56" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classvrv_1_1_pitch_interface_1a720eabf22b709d13987df460e0c40c89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vrv::PitchInterface::AdjustPitchForNewClef</definition>
        <argsstring>(const Clef *oldClef, const Clef *newClef)</argsstring>
        <name>AdjustPitchForNewClef</name>
        <param>
          <type>const <ref refid="classvrv_1_1_clef" kindref="compound">Clef</ref> *</type>
          <declname>oldClef</declname>
        </param>
        <param>
          <type>const <ref refid="classvrv_1_1_clef" kindref="compound">Clef</ref> *</type>
          <declname>newClef</declname>
        </param>
        <briefdescription>
<para>adjust the pitch value so that it stays in the same x,y position given it&apos;s new and old clefs </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/verovio/verovio/include/vrv/pitchinterface.h" line="62" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classvrv_1_1_pitch_interface_1a3efb531b25e89181a821d237fbdf903e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void vrv::PitchInterface::AdjustPname</definition>
        <argsstring>(int &amp;pname, int &amp;oct)</argsstring>
        <name>AdjustPname</name>
        <param>
          <type>int &amp;</type>
          <declname>pname</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>oct</declname>
        </param>
        <briefdescription>
<para>Adjust the pname and the octave for values outside the range. </para>
        </briefdescription>
        <detaileddescription>
<para>To be tested </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/verovio/verovio/include/vrv/pitchinterface.h" line="72" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classvrv_1_1_pitch_interface_1a5e9d080f4132195df6c62c8a92cb7320" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int vrv::PitchInterface::CalcLoc</definition>
        <argsstring>(const LayerElement *element, const Layer *layer, const LayerElement *crossStaffElement, bool topChordNote=true)</argsstring>
        <name>CalcLoc</name>
        <param>
          <type>const <ref refid="classvrv_1_1_layer_element" kindref="compound">LayerElement</ref> *</type>
          <declname>element</declname>
        </param>
        <param>
          <type>const <ref refid="classvrv_1_1_layer" kindref="compound">Layer</ref> *</type>
          <declname>layer</declname>
        </param>
        <param>
          <type>const <ref refid="classvrv_1_1_layer_element" kindref="compound">LayerElement</ref> *</type>
          <declname>crossStaffElement</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>topChordNote</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Calculate the loc for a note, rest or chord considering its position in the layer. </para>
        </briefdescription>
        <detaileddescription>
<para>By default for chord takes the top note, but the bottom note otherwise. E.g., return 0 for and C4 with clef C1, -2 with clef G2. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/verovio/verovio/include/vrv/pitchinterface.h" line="79" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classvrv_1_1_pitch_interface_1ac6d9b7ec74dba44097241bb60b365284" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int vrv::PitchInterface::CalcLoc</definition>
        <argsstring>(data_PITCHNAME pname, int oct, int clefLocOffset)</argsstring>
        <name>CalcLoc</name>
        <param>
          <type>data_PITCHNAME</type>
          <declname>pname</declname>
        </param>
        <param>
          <type>int</type>
          <declname>oct</declname>
        </param>
        <param>
          <type>int</type>
          <declname>clefLocOffset</declname>
        </param>
        <briefdescription>
<para>Calculate the loc for a pitch and octave and considerting the clef loc offset. </para>
        </briefdescription>
        <detaileddescription>
<para>E.g., return 0 for and C4 with clef C1, -2 with clef G2. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/verovio/verovio/include/vrv/pitchinterface.h" line="86" column="16"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This class is an interface for elements with pitch, such as notes and neumes. </para>
    </briefdescription>
    <detaileddescription>
<para>It is not an abstract class but should not be instanciated directly. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>AttNoteGes</label>
      </node>
      <node id="6">
        <label>vrv::Custos</label>
        <link refid="classvrv_1_1_custos"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>vrv::Interface</label>
        <link refid="classvrv_1_1_interface"/>
      </node>
      <node id="9">
        <label>vrv::Note</label>
        <link refid="classvrv_1_1_note"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>vrv::PitchInterface</label>
        <link refid="classvrv_1_1_pitch_interface"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>AttPitch</label>
      </node>
      <node id="8">
        <label>vrv::Nc</label>
        <link refid="classvrv_1_1_nc"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>vrv::KeyAccid</label>
        <link refid="classvrv_1_1_key_accid"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>AttOctave</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>AttNoteGes</label>
      </node>
      <node id="2">
        <label>vrv::Interface</label>
        <link refid="classvrv_1_1_interface"/>
      </node>
      <node id="1">
        <label>vrv::PitchInterface</label>
        <link refid="classvrv_1_1_pitch_interface"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>AttPitch</label>
      </node>
      <node id="4">
        <label>AttOctave</label>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/verovio/verovio/include/vrv/pitchinterface.h" line="28" column="92" bodyfile="/home/runner/work/verovio/verovio/include/vrv/pitchinterface.h" bodystart="28" bodyend="94"/>
    <listofallmembers>
      <member refid="classvrv_1_1_pitch_interface_1aa50e2d8637677e753a582083b7b8afb7" prot="public" virt="non-virtual"><scope>vrv::PitchInterface</scope><name>AdjustPitchByOffset</name></member>
      <member refid="classvrv_1_1_pitch_interface_1a720eabf22b709d13987df460e0c40c89" prot="public" virt="non-virtual"><scope>vrv::PitchInterface</scope><name>AdjustPitchForNewClef</name></member>
      <member refid="classvrv_1_1_pitch_interface_1a3efb531b25e89181a821d237fbdf903e" prot="public" virt="non-virtual"><scope>vrv::PitchInterface</scope><name>AdjustPname</name></member>
      <member refid="classvrv_1_1_pitch_interface_1a5e9d080f4132195df6c62c8a92cb7320" prot="public" virt="non-virtual"><scope>vrv::PitchInterface</scope><name>CalcLoc</name></member>
      <member refid="classvrv_1_1_pitch_interface_1ac6d9b7ec74dba44097241bb60b365284" prot="public" virt="non-virtual"><scope>vrv::PitchInterface</scope><name>CalcLoc</name></member>
      <member refid="classvrv_1_1_interface_1aa0b1e2570e8f6c9d0c7f9edd28fc344c" prot="public" virt="non-virtual"><scope>vrv::PitchInterface</scope><name>GetAttClasses</name></member>
      <member refid="classvrv_1_1_pitch_interface_1ab31f6dd5d225135f3b35f32ab2573d99" prot="public" virt="non-virtual"><scope>vrv::PitchInterface</scope><name>HasIdenticalPitchInterface</name></member>
      <member refid="classvrv_1_1_interface_1adaf168ce6b150aef8967391bf4f20e5f" prot="public" virt="non-virtual"><scope>vrv::PitchInterface</scope><name>Interface</name></member>
      <member refid="classvrv_1_1_pitch_interface_1ad5eb2bfb6682e72699fe4fb140a47350" prot="public" virt="virtual"><scope>vrv::PitchInterface</scope><name>IsInterface</name></member>
      <member refid="classvrv_1_1_pitch_interface_1a3f1089bfeddc84c7b3c31e3a239b4a76" prot="public" virt="non-virtual"><scope>vrv::PitchInterface</scope><name>PitchDifferenceTo</name></member>
      <member refid="classvrv_1_1_pitch_interface_1a4e00c45beb10eba31d98b5325151d8f5" prot="public" virt="non-virtual"><scope>vrv::PitchInterface</scope><name>PitchInterface</name></member>
      <member refid="classvrv_1_1_interface_1a57c9a4f18b81a07ef0d14dc040f84257" prot="public" virt="non-virtual"><scope>vrv::PitchInterface</scope><name>RegisterInterfaceAttClass</name></member>
      <member refid="classvrv_1_1_pitch_interface_1aadb1bc4e09bd2ea9686c06d75a077bb6" prot="public" virt="virtual"><scope>vrv::PitchInterface</scope><name>Reset</name></member>
      <member refid="classvrv_1_1_interface_1a1fbabd3b506190dc2f1b4584a49a85ea" prot="public" virt="virtual"><scope>vrv::PitchInterface</scope><name>~Interface</name></member>
      <member refid="classvrv_1_1_pitch_interface_1aab83493ea7752c45e398ebfcea706928" prot="public" virt="virtual"><scope>vrv::PitchInterface</scope><name>~PitchInterface</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
