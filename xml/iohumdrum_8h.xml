<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="iohumdrum_8h" kind="file" language="C++">
    <compoundname>iohumdrum.h</compoundname>
    <includes local="no">map</includes>
    <includes local="no">string</includes>
    <includes local="no">tuple</includes>
    <includes local="no">vector</includes>
    <includes refid="accid_8h" local="yes">accid.h</includes>
    <includes refid="attdef_8h" local="yes">attdef.h</includes>
    <includes refid="beatrpt_8h" local="yes">beatrpt.h</includes>
    <includes refid="clef_8h" local="yes">clef.h</includes>
    <includes refid="dir_8h" local="yes">dir.h</includes>
    <includes refid="ending_8h" local="yes">ending.h</includes>
    <includes refid="ftrem_8h" local="yes">ftrem.h</includes>
    <includes refid="io_8h" local="yes">io.h</includes>
    <includes refid="keysig_8h" local="yes">keysig.h</includes>
    <includes refid="label_8h" local="yes">label.h</includes>
    <includes refid="metersig_8h" local="yes">metersig.h</includes>
    <includes refid="options_8h" local="yes">options.h</includes>
    <includes refid="pedal_8h" local="yes">pedal.h</includes>
    <includes refid="reh_8h" local="yes">reh.h</includes>
    <includes refid="rend_8h" local="yes">rend.h</includes>
    <includes refid="runningelement_8h" local="yes">runningelement.h</includes>
    <includes refid="section_8h" local="yes">section.h</includes>
    <includes refid="slur_8h" local="yes">slur.h</includes>
    <includes refid="tempo_8h" local="yes">tempo.h</includes>
    <includes refid="tie_8h" local="yes">tie.h</includes>
    <includes refid="verse_8h" local="yes">verse.h</includes>
    <includes refid="vrvdef_8h" local="yes">vrvdef.h</includes>
    <includes local="yes">humlib.h</includes>
    <includes local="yes">pugixml.hpp</includes>
    <incdepgraph>
      <node id="18">
        <label>list</label>
      </node>
      <node id="30">
        <label>beatrpt.h</label>
        <link refid="beatrpt_8h_source"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>metersiggrp.h</label>
        <link refid="metersiggrp_8h_source"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>atts_analytical.h</label>
      </node>
      <node id="28">
        <label>boundingbox.h</label>
        <link refid="boundingbox_8h_source"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>ending.h</label>
        <link refid="ending_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>stdarg.h</label>
      </node>
      <node id="17">
        <label>functional</label>
      </node>
      <node id="8">
        <label>atts_gestural.h</label>
      </node>
      <node id="53">
        <label>timeinterface.h</label>
        <link refid="timeinterface_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>atts_mensural.h</label>
      </node>
      <node id="65">
        <label>rend.h</label>
        <link refid="rend_8h_source"/>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>iterator</label>
      </node>
      <node id="22">
        <label>atttypes.h</label>
      </node>
      <node id="34">
        <label>clef.h</label>
        <link refid="clef_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>systemelement.h</label>
        <link refid="systemelement_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>atts_visual.h</label>
      </node>
      <node id="69">
        <label>section.h</label>
        <link refid="section_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>positioninterface.h</label>
        <link refid="positioninterface_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>textdirinterface.h</label>
        <link refid="textdirinterface_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="76">
        <label>pugixml.hpp</label>
      </node>
      <node id="9">
        <label>layerelement.h</label>
        <link refid="layerelement_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>accid.h</label>
        <link refid="accid_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>io.h</label>
        <link refid="io_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>metersig.h</label>
        <link refid="metersig_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="60">
        <label>options.h</label>
        <link refid="options_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>floatingobject.h</label>
        <link refid="floatingobject_8h_source"/>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>boundary.h</label>
        <link refid="boundary_8h_source"/>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="64">
        <label>reh.h</label>
        <link refid="reh_8h_source"/>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>string</label>
      </node>
      <node id="2">
        <label>map</label>
      </node>
      <node id="62">
        <label>jsonxx.h</label>
      </node>
      <node id="73">
        <label>tie.h</label>
        <link refid="tie_8h_source"/>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>devicecontextbase.h</label>
        <link refid="devicecontextbase_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="68">
        <label>runningelement.h</label>
        <link refid="runningelement_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>beam.h</label>
        <link refid="beam_8h_source"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="75">
        <label>humlib.h</label>
      </node>
      <node id="31">
        <label>atts_cmn.h</label>
      </node>
      <node id="59">
        <label>label.h</label>
        <link refid="label_8h_source"/>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>attdef.h</label>
        <link refid="attdef_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>atts_shared.h</label>
      </node>
      <node id="14">
        <label>linkinginterface.h</label>
        <link refid="linkinginterface_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="67">
        <label>textelement.h</label>
        <link refid="textelement_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>mensur.h</label>
        <link refid="mensur_8h_source"/>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>tuple</label>
      </node>
      <node id="26">
        <label>ctime</label>
      </node>
      <node id="5">
        <label>vector</label>
      </node>
      <node id="20">
        <label>utility</label>
      </node>
      <node id="7">
        <label>atts_externalsymbols.h</label>
      </node>
      <node id="1">
        <label>iohumdrum.h</label>
        <link refid="iohumdrum_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>atts_facsimile.h</label>
      </node>
      <node id="50">
        <label>controlelement.h</label>
        <link refid="controlelement_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>facsimileinterface.h</label>
        <link refid="facsimileinterface_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="74">
        <label>verse.h</label>
        <link refid="verse_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="72">
        <label>atts_midi.h</label>
      </node>
      <node id="63">
        <label>pedal.h</label>
        <link refid="pedal_8h_source"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>object.h</label>
        <link refid="object_8h_source"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>math.h</label>
      </node>
      <node id="71">
        <label>tempo.h</label>
        <link refid="tempo_8h_source"/>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>cstdlib</label>
      </node>
      <node id="70">
        <label>slur.h</label>
        <link refid="slur_8h_source"/>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>ftrem.h</label>
        <link refid="ftrem_8h_source"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>sys/time.h</label>
      </node>
      <node id="41">
        <label>keysig.h</label>
        <link refid="keysig_8h_source"/>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>dir.h</label>
        <link refid="dir_8h_source"/>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>attalternates.h</label>
        <link refid="attalternates_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="66">
        <label>areaposinterface.h</label>
        <link refid="areaposinterface_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>attclasses.h</label>
      </node>
      <node id="48">
        <label>atts_mei.h</label>
      </node>
      <node id="36">
        <label>vrv.h</label>
        <link refid="vrv_8h_source"/>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>set</label>
      </node>
      <node id="16">
        <label>algorithm</label>
      </node>
      <node id="39">
        <label>stdio.h</label>
      </node>
      <node id="33">
        <label>drawinginterface.h</label>
        <link refid="drawinginterface_8h_source"/>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>cstring</label>
      </node>
      <node id="15">
        <label>vrvdef.h</label>
        <link refid="vrvdef_8h_source"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="classvrv_1_1_humdrum_signifiers" prot="public">vrv::HumdrumSignifiers</innerclass>
    <innerclass refid="classvrv_1_1_humdrum_input" prot="public">vrv::HumdrumInput</innerclass>
    <innernamespace refid="namespacevrv">vrv</innernamespace>
    <innernamespace refid="namespacevrv_1_1humaux">vrv::humaux</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Name:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iohumdrum.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Author:<sp/><sp/><sp/><sp/><sp/><sp/>Craig<sp/>Stuart<sp/>Sapp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Created:<sp/><sp/><sp/><sp/><sp/>06/06/2015</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>Authors<sp/>and<sp/>others.<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="7"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__VRV_IOHUMDRUM_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__VRV_IOHUMDRUM_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;tuple&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;accid.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;attdef.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;beatrpt.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;clef.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;dir.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ending.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ftrem.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;io.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;keysig.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;label.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;metersig.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;options.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pedal.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;reh.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;rend.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;runningelement.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;section.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;slur.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;tempo.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;tie.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;verse.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;vrvdef.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NO_HUMDRUM_SUPPORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;humlib.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pugixml.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#include<sp/>&quot;tool-musicxml2hum.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>NO_HUMDRUM_SUPPORT<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">vrv<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NO_HUMDRUM_SUPPORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Beam;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Chord;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Layer;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Measure;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ScoreDef;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Note;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Hairpin;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MRest;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Rest;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Score;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Section;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Space;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Staff;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">StaffDef;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">StaffGrp;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Tie;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">//<sp/>namespace<sp/>for<sp/>local<sp/>IoHumdrum<sp/>classes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">humaux<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">HumdrumTie<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HumdrumTie();</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HumdrumTie(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>HumdrumTie<sp/>&amp;anothertie);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~HumdrumTie();</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HumdrumTie<sp/>&amp;operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>HumdrumTie<sp/>&amp;anothertie);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvrv_1_1_tie" kindref="compound">vrv::Tie</ref><sp/>*insertTieIntoDom();</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setStart(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>Measure<sp/>*starting,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>layer,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;token,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pitch,</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hum::HumNum<sp/>starttime,<sp/>hum::HumNum<sp/>endtime,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>subindex,<sp/>hum::HTp<sp/>starttok,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>metertop,</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hum::HumNum<sp/>meterbot);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setEnd(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>Measure<sp/>*ending,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;token);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvrv_1_1_tie" kindref="compound">vrv::Tie</ref><sp/>*setEndAndInsert(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>Measure<sp/>*ending,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;token);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hum::HumNum<sp/>getEndTime();</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hum::HumNum<sp/>getStartTime();</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hum::HumNum<sp/>getDuration();</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>getStartToken();</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hum::HTp<sp/>getStartTokenPointer();</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>getEndToken();</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Measure<sp/>*getStartMeasure();</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>getStartSubindex();</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>getPitch();</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>getLayer();</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isInserted();</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>clear();</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setTieAbove();</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setTieBelow();</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>getMeterTop();</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hum::HumNum<sp/>getMeterBottom();</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setMeterTop(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>metertop);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setMeterBottom(hum::HumNum<sp/>meterbot);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>m_starttoken;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>m_endtoken;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hum::HumNum<sp/>m_starttime;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hum::HumNum<sp/>m_endtime;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m_pitch;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m_layer;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>m_inserted;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>m_above;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>m_below;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>m_startid;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>m_endid;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Measure<sp/>*m_startmeasure;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Measure<sp/>*m_endmeasure;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hum::HTp<sp/>m_starttokenpointer<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m_subindex;<sp/></highlight><highlight class="comment">//<sp/>the<sp/>subtoken<sp/>index<sp/>for<sp/>the<sp/>start<sp/>of<sp/>the<sp/>tie</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m_meter_top;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hum::HumNum<sp/>m_meter_bottom;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">HumdrumBeamAndTuplet<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>group;<sp/></highlight><highlight class="comment">//<sp/>tuplet<sp/>group<sp/>for<sp/>layer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bracket;<sp/></highlight><highlight class="comment">//<sp/>-1=undefined,<sp/>0=none,<sp/>1=show</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num;<sp/></highlight><highlight class="comment">//<sp/>@num</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numbase;<sp/></highlight><highlight class="comment">//<sp/>@numbase</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numscale;<sp/></highlight><highlight class="comment">//<sp/>for<sp/>converting<sp/>triplets<sp/>into<sp/>sextuplets<sp/>for<sp/>example</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tupletstart;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tupletend;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>beamstart;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>beamend;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gbeamstart;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gbeamend;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>priority;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>force;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hum::HTp<sp/>token;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hum::HumNum<sp/>duration;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hum::HumNum<sp/>durationnodots;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HumdrumBeamAndTuplet()<sp/>{<sp/>clear();<sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~HumdrumBeamAndTuplet()<sp/>{<sp/>clear();<sp/>}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>clear()</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>group<sp/>=<sp/>bracket<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numbase<sp/>=<sp/>num<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numscale<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tupletstart<sp/>=<sp/>tupletend<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>beamstart<sp/>=<sp/>beamend<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gbeamstart<sp/>=<sp/>gbeamend<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>force<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>priority<sp/>=<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>duration<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>durationnodots<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>token<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>StaffStateVariables<sp/>is<sp/>a<sp/>data<sp/>structure<sp/>used<sp/>in<sp/>the<sp/>HumdrumInput</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>class<sp/>to<sp/>store<sp/>state<sp/>variables<sp/>for<sp/>processing<sp/>staves.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">StaffStateVariables<sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StaffStateVariables();</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~StaffStateVariables();</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>clear();</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ostream<sp/>&amp;print(ostream<sp/>&amp;out<sp/>=<sp/>std::cout,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;prefix<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;SS&gt;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>verse<sp/>==<sp/>keeps<sp/>track<sp/>of<sp/>whether<sp/>or<sp/>not<sp/>staff<sp/>contains<sp/>associated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>**text<sp/>spines<sp/>which<sp/>will<sp/>be<sp/>converted<sp/>into<sp/>lyrics.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>verse;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>verse_labels<sp/>==<sp/>List<sp/>of<sp/>verse<sp/>labels<sp/>that<sp/>need<sp/>to<sp/>be<sp/>added<sp/>to<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>current<sp/>staff.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;hum::HTp&gt;<sp/>verse_labels;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>suppress_tuplet_number<sp/>==<sp/>keeps<sp/>track<sp/>of<sp/>whether<sp/>or<sp/>not<sp/>beams<sp/>should</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>display<sp/>beam<sp/>tuplet<sp/>numbers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>suppress_tuplet_number;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>suppress_tuplet_bracket<sp/>==<sp/>keeps<sp/>track<sp/>of<sp/>whether<sp/>or<sp/>not<sp/>tuplet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>brackets<sp/>should<sp/>be<sp/>displayed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>suppress_tuplet_bracket;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Used<sp/>for<sp/>tremolo<sp/>compression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>tremolo;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Used<sp/>for<sp/>sustain<sp/>pedal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>pedal;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cue_size<sp/>==<sp/>keeps<sp/>track<sp/>of<sp/>whether<sp/>or<sp/>not<sp/>the<sp/>notes<sp/>in<sp/>the<sp/>current</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>staff/layer<sp/>should<sp/>be<sp/>cue<sp/>sized.<sp/><sp/>Index<sp/>0<sp/>is<sp/>used<sp/>to<sp/>control<sp/>all</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>layers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;bool&gt;<sp/>cue_size;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stem_type<sp/>==<sp/>keeps<sp/>track<sp/>of<sp/>what<sp/>type<sp/>of<sp/>stem<sp/>to<sp/>automatically</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>to<sp/>a<sp/>note/chord.<sp/><sp/>The<sp/>states<sp/>are:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&apos;\&apos;<sp/>==<sp/>down<sp/>stem</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&apos;/&apos;<sp/>==<sp/>up<sp/>stem</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&apos;x&apos;<sp/>==<sp/>no<sp/>stem</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&apos;X&apos;<sp/>==<sp/>no<sp/>automatic<sp/>assignments<sp/>(assignment<sp/>will<sp/>be<sp/>done<sp/>automatically<sp/>by<sp/>verovio).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;char&gt;<sp/>stem_type;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ligature_recta<sp/>==<sp/>true<sp/>if<sp/>in<sp/>a<sp/>recta<sp/>ligature</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ligature_recta<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ligature_obliqua<sp/>==<sp/>true<sp/>if<sp/>in<sp/>a<sp/>obliqua<sp/>ligature</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ligature_obliqua<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>last_clef<sp/>==<sp/>keep<sp/>track<sp/>of<sp/>last<sp/>clef<sp/>on<sp/>staff<sp/>to<sp/>avoid<sp/>duplications.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Probably<sp/>better<sp/>to<sp/>convert<sp/>to<sp/>hum::HTp<sp/>so<sp/>its<sp/>location<sp/>can<sp/>be<sp/>utilized.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>last_clef;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>acclev<sp/>==<sp/>In<sp/>**mens<sp/>data,<sp/>controls<sp/>the<sp/>accidental<sp/>level<sp/>conversion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>from<sp/>gestural<sp/>to<sp/>editorial.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>*acclev:0<sp/>==<sp/>no<sp/>editorial<sp/>acccidentals<sp/>visible<sp/>(all<sp/>converted<sp/>to<sp/>gestural)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>*acclev:1<sp/>==<sp/>accidentals<sp/>marked<sp/>with<sp/>YY<sp/>are<sp/>displayed<sp/>as<sp/>editorial<sp/>accidentals<sp/>(above<sp/>notes)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>*acclev:2<sp/>==<sp/>accidentals<sp/>marked<sp/>with<sp/>Y<sp/>are<sp/>displayed<sp/>as<sp/>editorial<sp/>accidentals<sp/>(above<sp/>notes)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>*acclev:3<sp/>==<sp/>accidentals<sp/>marked<sp/>with<sp/>yy<sp/>are<sp/>displayed<sp/>as<sp/>editorial<sp/>accidentals<sp/>(above<sp/>notes)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>*acclev:4<sp/>==<sp/>accidentals<sp/>marked<sp/>with<sp/>y<sp/>are<sp/>displayed<sp/>as<sp/>editorial<sp/>accidentals<sp/>(above<sp/>notes)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>meaning<sp/>of<sp/>the<sp/>accidental<sp/>marks:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>y<sp/>=<sp/>algorithmic<sp/>interpretation<sp/>of<sp/>an<sp/>implicit<sp/>accidental,<sp/>primarily<sp/>used<sp/>for<sp/>notes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>with<sp/>accidentals<sp/>not<sp/>shown<sp/>but<sp/>assigned<sp/>by<sp/>the<sp/>key<sp/>signature.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>yy<sp/>=<sp/>a<sp/>cautionary<sp/>type<sp/>of<sp/>accidental,<sp/>such<sp/>as<sp/>returning<sp/>to<sp/>the<sp/>accidental<sp/>within<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>key<sp/>signature<sp/>(such<sp/>as<sp/>a<sp/>b-flat<sp/>coming<sp/>after<sp/>a<sp/>b-natural<sp/>in<sp/>a<sp/>1-flat<sp/>key<sp/>signature).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Y<sp/>=<sp/>a<sp/>performance<sp/>interpretation<sp/>accidental<sp/>(musica<sp/>ficta)<sp/>that<sp/>is<sp/>not<sp/>indicated<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>directly<sp/>implied<sp/>in<sp/>the<sp/>source,<sp/>but<sp/>is<sp/>needed<sp/>due<sp/>to<sp/>performance<sp/>practice.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>YY<sp/>=<sp/>an<sp/>accidental<sp/>that<sp/>should<sp/>be<sp/>added<sp/>due<sp/>to<sp/>what<sp/>the<sp/>editor<sp/>thinks<sp/>is<sp/>an<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Equivalences<sp/>to<sp/>numbers:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>*Xacclev<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>==<sp/>*acclev:0<sp/><sp/>all<sp/>levels<sp/>are<sp/>mapped<sp/>to<sp/>@accid.ges</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>*acclev<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>==<sp/>*acclev:0<sp/><sp/>all<sp/>levels<sp/>are<sp/>mapped<sp/>to<sp/>@accid.ges</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>*acclev:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>==<sp/>*acclev:0<sp/><sp/>all<sp/>levels<sp/>are<sp/>mapped<sp/>to<sp/>@accid.ges</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>*acclev:YY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>==<sp/>*acclev:1<sp/><sp/>levels<sp/>2-4<sp/>are<sp/>mapped<sp/>to<sp/>@accid.ges<sp/>and<sp/>level<sp/>1<sp/><sp/><sp/><sp/>to<sp/>@accd+@edit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>*acclev:Y<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>==<sp/>*acclev:2<sp/><sp/>levels<sp/>3-4<sp/>are<sp/>mapped<sp/>to<sp/>@accid.ges<sp/>and<sp/>levels<sp/>1-2<sp/>to<sp/>@accd+@edit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>*acclev:yy<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>==<sp/>*acclev:3<sp/><sp/>level<sp/><sp/><sp/><sp/>4<sp/>is<sp/><sp/>mapped<sp/>to<sp/>@accid.ges<sp/>and<sp/>levels<sp/>1-3<sp/>to<sp/>@accd+@edit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>*acclev:y<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>==<sp/>*acclev:4<sp/><sp/>all<sp/>levels<sp/>are<sp/>mapped<sp/>to<sp/>@accid+@edit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>default<sp/>level<sp/>is<sp/>*acclev:1<sp/>(YY<sp/>will<sp/>show<sp/>as<sp/>editorial<sp/>accidental,<sp/>y,<sp/>yy,<sp/>and<sp/>Y<sp/>will<sp/>be<sp/>@accid.ges)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>acclev<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>righthalfstem<sp/>==<sp/>true<sp/>means<sp/>to<sp/>place<sp/>half-note<sp/>stems<sp/>always<sp/>on<sp/>right<sp/>side</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>noteheads.<sp/><sp/>False<sp/>is<sp/>standard<sp/>modern<sp/>style.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>righthalfstem;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ottavanote<sp/>==<sp/>keep<sp/>track<sp/>of<sp/>ottava<sp/>marks:<sp/>stores<sp/>the<sp/>starting<sp/>note<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>an<sp/>ottava<sp/>line<sp/>which<sp/>will<sp/>be<sp/>turned<sp/>off<sp/>later.<sp/><sp/>ottavameasure<sp/>==<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>starting<sp/>measure<sp/>of<sp/>the<sp/>ottava<sp/>mark.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Note<sp/>*ottavanotestart;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Note<sp/>*ottavanoteend;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hum::HumNum<sp/>ottavaendtimestamp;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Measure<sp/>*ottavameasure;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ottavadownnote<sp/>==<sp/>keep<sp/>track<sp/>of<sp/>ottava<sp/>down<sp/>marks:<sp/>stores<sp/>the<sp/>starting<sp/>note<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>an<sp/>ottava<sp/>down<sp/>line<sp/>which<sp/>will<sp/>be<sp/>turned<sp/>off<sp/>later.<sp/><sp/>ottavadownmeasure<sp/>==<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>starting<sp/>measure<sp/>of<sp/>the<sp/>ottava<sp/>down<sp/>mark.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Note<sp/>*ottavadownnotestart;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Note<sp/>*ottavadownnoteend;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hum::HumNum<sp/>ottavadownendtimestamp;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Measure<sp/>*ottavadownmeasure;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ottava2note<sp/>==<sp/>keep<sp/>track<sp/>of<sp/>ottava2<sp/>marks:<sp/>stores<sp/>the<sp/>starting<sp/>note<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>an<sp/>ottava2<sp/>line<sp/>which<sp/>will<sp/>be<sp/>turned<sp/>off<sp/>later.<sp/><sp/>ottava2measure<sp/>==<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>starting<sp/>measure<sp/>of<sp/>the<sp/>ottava2<sp/>mark.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Note<sp/>*ottava2notestart;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Note<sp/>*ottava2noteend;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hum::HumNum<sp/>ottava2endtimestamp;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Measure<sp/>*ottava2measure;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ottava2downnote<sp/>==<sp/>keep<sp/>track<sp/>of<sp/>ottava2<sp/>down<sp/>marks:<sp/>stores<sp/>the<sp/>starting<sp/>note<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>an<sp/>ottava2<sp/>down<sp/>line<sp/>which<sp/>will<sp/>be<sp/>turned<sp/>off<sp/>later.<sp/><sp/>ottava2downmeasure<sp/>==<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>starting<sp/>measure<sp/>of<sp/>the<sp/>ottava2<sp/>down<sp/>mark.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Note<sp/>*ottava2downnotestart;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Note<sp/>*ottava2downnoteend;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hum::HumNum<sp/>ottava2downendtimestamp;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Measure<sp/>*ottava2downmeasure;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>meter_bottom<sp/>==<sp/>Used<sp/>to<sp/>keep<sp/>track<sp/>of<sp/>bottom<sp/>value<sp/>of<sp/>time<sp/>signature.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>needed<sp/>to<sp/>calculate<sp/>tstamps<sp/>(meter.unit).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hum::HumNum<sp/>meter_bottom<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>meter_top<sp/>==<sp/>The<sp/>top<sp/>number<sp/>of<sp/>the<sp/>time<sp/>signature<sp/>(meter.count).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>meter_top<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Active<sp/>**mens<sp/>rhythmic<sp/>level<sp/>divisions:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maximodus<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>how<sp/>many<sp/>longs<sp/>in<sp/>a<sp/>maxima</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>modus<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>how<sp/>many<sp/>breves<sp/>in<sp/>a<sp/>long</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tempus<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>how<sp/>many<sp/>semibreves<sp/>in<sp/>a<sp/>breve</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>prolatio<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>how<sp/>many<sp/>minims<sp/>in<sp/>a<sp/>semibreve</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ties<sp/>==<sp/>Keep<sp/>track<sp/>of<sp/>ties<sp/>for<sp/>each<sp/>staff/layer/pitch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>allow<sp/>for<sp/>cross-layer<sp/>ties<sp/>(no<sp/>cross<sp/>staff<sp/>ties,<sp/>but<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>could<sp/>be<sp/>easy<sp/>to<sp/>implement.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>dimensions:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1:<sp/>staff</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2:<sp/>all<sp/>open<sp/>ties<sp/>for<sp/>the<sp/>staff</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::list&lt;humaux::HumdrumTie&gt;<sp/>ties;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m_dynampos<sp/>==<sp/>Dynamic<sp/>position<sp/>relativ<sp/>to<sp/>the<sp/>staff:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>+1<sp/>=<sp/>above,<sp/>-1=below,<sp/>2=centered<sp/>(deal<sp/>center<sp/>between<sp/>staves<sp/>later)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m_dynampos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m_dynamstaffadj<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>used<sp/>for<sp/>grand<sp/>staff<sp/>movement<sp/>of<sp/>dynamics<sp/>to<sp/>lower<sp/>staff</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>m_dynamposdefined<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>used<sp/>for<sp/>undefined<sp/>positions<sp/>since<sp/>0<sp/>used<sp/>for<sp/>center</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m_notehead<sp/>==<sp/>Notehead<sp/>shape<sp/>for<sp/>notes<sp/>on<sp/>the<sp/>staff.<sp/><sp/>This<sp/>could<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>expanded<sp/>later<sp/>into<sp/>separate<sp/>control<sp/>by<sp/>subspine<sp/>and/or<sp/>by<sp/>pitch<sp/>(staff/line).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>m_notehead;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>auto_custos<sp/>==<sp/>Whether<sp/>or<sp/>not<sp/>to<sp/>generate<sp/>automatic<sp/>custodes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>at<sp/>line<sp/>breaks.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>auto_custos<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>suppress_manual_custos<sp/>==<sp/>Do<sp/>not<sp/>render<sp/>manually<sp/>encoded<sp/>custodes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>at<sp/>line<sp/>breaks.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>suppress_manual_custos<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>toggle<sp/>for<sp/>black/white<sp/>mensural<sp/>notation.<sp/><sp/>0=white,<sp/>1=black</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mensuration_type<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="325"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>humaux</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327" refid="classvrv_1_1_humdrum_signifiers" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classvrv_1_1_humdrum_signifiers" kindref="compound">HumdrumSignifiers</ref><sp/>{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>empty<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>boolean<sp/>switches:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>nostem<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>!!!RDF**kern:<sp/>N<sp/>=<sp/>no<sp/>stem</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>cuesize<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>!!!RDF**kern:<sp/>@<sp/>=<sp/>cue<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>terminallong<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>!!!RDF**kern:<sp/>l<sp/>=<sp/>terminal<sp/>long</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;char&gt;<sp/>editacc;<sp/></highlight><highlight class="comment">//<sp/>!!!RDF**kern:<sp/>i<sp/>=<sp/>editorial<sp/>accidental</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>edittype;<sp/></highlight><highlight class="comment">//<sp/>!!!RDF**kern:<sp/>i<sp/>=<sp/>editoral<sp/>accidental,<sp/>brack[ets]/paren[theses]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>**dynam:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>cresctext;<sp/></highlight><highlight class="comment">//<sp/>!!!RDF**kern:<sp/>&gt;<sp/>=<sp/>&quot;cresc.&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>crescfontstyle;<sp/></highlight><highlight class="comment">//<sp/>!!!RDF**kern:<sp/>&lt;<sp/>=<sp/>&quot;cresc.&quot;<sp/>fontstyle=&quot;normal|italic|bold|bold-italic&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>decresctext;<sp/></highlight><highlight class="comment">//<sp/>!!!RDF**kern:<sp/>&gt;<sp/>=<sp/>&quot;decresc.&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>decrescfontstyle;<sp/></highlight><highlight class="comment">//<sp/>!!!RDF**kern:<sp/>&lt;<sp/>=<sp/>&quot;decresc.&quot;<sp/>fontstyle=&quot;normal|italic|bold|bold-italic&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>below<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>!!!RDF**kern:<sp/>&lt;<sp/>=<sp/>below<sp/>(previous<sp/>signifier<sp/>is<sp/>&quot;below&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>above<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>!!!RDF**kern:<sp/>&gt;<sp/>=<sp/>above<sp/>(previous<sp/>signifier<sp/>is<sp/>&quot;above&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>phrase_color;<sp/></highlight><highlight class="comment">//<sp/>for<sp/>global<sp/>stying<sp/>of<sp/>phrase<sp/>markers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>phrase_style;<sp/></highlight><highlight class="comment">//<sp/>for<sp/>global<sp/>stying<sp/>of<sp/>phrase<sp/>markers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>phrase_slur;<sp/></highlight><highlight class="comment">//<sp/>for<sp/>global<sp/>stying<sp/>of<sp/>phrase<sp/>markers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>space_color;<sp/></highlight><highlight class="comment">//<sp/>!!!RDF**kern:<sp/>show<sp/>spaces<sp/>color=hotpink</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>ispace_color;<sp/></highlight><highlight class="comment">//<sp/>!!!RDF**kern:<sp/>show<sp/>invisible<sp/>rests<sp/>color=chartreuse</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>irest_color;<sp/></highlight><highlight class="comment">//<sp/>!!!RDF**kern:<sp/>show<sp/>implicit<sp/>spaces<sp/>color=blueviolet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>rspace_color;<sp/></highlight><highlight class="comment">//<sp/>!!!RDF**kern:<sp/>show<sp/>recip<sp/>spaces<sp/>color=royalblue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Coloring<sp/>of<sp/>notes/rests<sp/>in<sp/>**kern:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>!!!RDF**kern:<sp/>i<sp/>=<sp/>marked<sp/>note,<sp/>color=&quot;#553325&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>!!!RDF**kern:<sp/>i<sp/>=<sp/>matched<sp/>note,<sp/>color=red</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>!!!RDF**kern:<sp/>i<sp/>=<sp/>color=&quot;blue&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>default<sp/>is<sp/>red<sp/>if<sp/>no<sp/>color<sp/>given:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>!!!RDF**kern:<sp/>i<sp/>=<sp/>matched<sp/>note</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>!!!RDF**kern:<sp/>i<sp/>=<sp/>marked<sp/>note</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;char&gt;<sp/>mark;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>mcolor;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>markdir;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Coloring<sp/>of<sp/>**mens<sp/>notes<sp/>(not<sp/>for<sp/>coloration).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>default<sp/>color<sp/>is<sp/>hotpink,<sp/>since<sp/>red<sp/>is<sp/>used<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>colored<sp/>notes<sp/>in<sp/>black<sp/>notation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;char&gt;<sp/>mens_mark;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>mens_mcolor;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>mens_markdir;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Coloring<sp/>of<sp/>**text:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;char&gt;<sp/>textmark;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>textcolor;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>hairpinAccent<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>For<sp/>&lt;&gt;<sp/>accent<sp/>on<sp/>a<sp/>note.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>verticalStroke<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>For<sp/>horizontal<sp/>stroke<sp/>ornament</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal">};</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>NO_HUMDRUM_SUPPORT<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight><highlight class="comment">//<sp/>HumdrumInput</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388" refid="classvrv_1_1_humdrum_input" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classvrv_1_1_humdrum_input" kindref="compound">HumdrumInput</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classvrv_1_1_input" kindref="compound">vrv::Input</ref><sp/>{</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>constructors<sp/>and<sp/>destructors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvrv_1_1_humdrum_input" kindref="compound">HumdrumInput</ref>(<ref refid="classvrv_1_1_doc" kindref="compound">vrv::Doc</ref><sp/>*doc);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="classvrv_1_1_humdrum_input" kindref="compound">HumdrumInput</ref>();</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Import(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;humdrum);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>parseEmbeddedOptions(<ref refid="classvrv_1_1_doc" kindref="compound">vrv::Doc</ref><sp/>*doc);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>finalizeDocument(<ref refid="classvrv_1_1_doc" kindref="compound">vrv::Doc</ref><sp/>*doc);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NO_HUMDRUM_SUPPORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>GetHumdrumString();</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>GetMeiString();</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>clear();</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>convertHumdrum();</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setupMeiDocument();</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>getMeasureEndLine(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>startline);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>convertSystemMeasure(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;line);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>convertMeasureStaves(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>startline,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>endline);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>convertMeasureStaff(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>track,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>startline,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>endline,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>layercount);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setupSystemMeasure(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>startline,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>endline);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>convertStaffLayer(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>track,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>startline,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>endline,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>layerindex);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>getMeasureNumber(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>startline,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>endline);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fillContentsOfLayer(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>track,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>startline,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>endline,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>layerindex);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>calculateLayout();</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setSystemMeasureStyle(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>startline,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>endline);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>getStaffLayerCounts();</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>prepareStaffGroups(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>top,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bot);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setClef(<ref refid="classvrv_1_1_staff_def" kindref="compound">StaffDef</ref><sp/>*staff,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;clef,<sp/>hum::HTp<sp/>cleftok<sp/>=<sp/>NULL,<sp/>hum::HTp<sp/>striatok<sp/>=<sp/>NULL);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setDynamicTransposition(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>staffindex,<sp/><ref refid="classvrv_1_1_staff_def" kindref="compound">StaffDef</ref><sp/>*staff,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;itranspose);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setTransposition(<ref refid="classvrv_1_1_staff_def" kindref="compound">StaffDef</ref><sp/>*staffDef,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;transpose);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setTimeSig(<ref refid="classvrv_1_1_staff_def" kindref="compound">StaffDef</ref><sp/>*part,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;timesig,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;metersig<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hum::HTp<sp/>partstart<sp/>=<sp/>NULL,<sp/>hum::HTp<sp/>timetok<sp/>=<sp/>NULL);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>fillStaffInfo(hum::HTp<sp/>staffstart,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>staffnumber,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>staffcount);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>storeStaffLayerTokensForMeasure(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>startline,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>endline);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>calculateReverseKernIndex();</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>prepareTimeSigDur(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;top,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;bot);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>printMeasureTokens();</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>characterCount(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;text,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>symbol);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>characterCount(hum::HTp<sp/>token,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>symbol);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>characterCountInSubtoken(hum::HTp<sp/>token,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>symbol);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>characterCountInSubtoken(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;text,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>symbol);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>emptyMeasures();</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasFullMeasureRest(std::vector&lt;hum::HTp&gt;<sp/>&amp;layerdata,<sp/>hum::HumNum<sp/>timesigdur,<sp/>hum::HumNum<sp/>measuredur);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>convertNote(<ref refid="classvrv_1_1_note" kindref="compound">vrv::Note</ref><sp/>*note,<sp/>hum::HTp<sp/>token,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>staffadj,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>staffindex,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>subtoken<sp/>=<sp/>-1);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addCautionaryAccidental(<ref refid="classvrv_1_1_accid" kindref="compound">Accid</ref><sp/>*accid,<sp/>hum::HTp<sp/>token,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>acount);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>convertRest(<ref refid="classvrv_1_1_rest" kindref="compound">vrv::Rest</ref><sp/>*rest,<sp/>hum::HTp<sp/>token,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>subtoken,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>staffindex);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>convertMRest(<ref refid="classvrv_1_1_m_rest" kindref="compound">MRest</ref><sp/>*rest,<sp/>hum::HTp<sp/>token,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>subtoken,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>staffindex);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>processTieStart(<ref refid="classvrv_1_1_note" kindref="compound">Note</ref><sp/>*note,<sp/>hum::HTp<sp/>token,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;tstring,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>subindex);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>processTieEnd(<ref refid="classvrv_1_1_note" kindref="compound">Note</ref><sp/>*note,<sp/>hum::HTp<sp/>token,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;tstring,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>subindex);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addFermata(hum::HTp<sp/>token,<sp/><ref refid="classvrv_1_1_object" kindref="compound">vrv::Object</ref><sp/>*parent<sp/>=<sp/>NULL);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addBreath(hum::HTp<sp/>token,<sp/><ref refid="classvrv_1_1_object" kindref="compound">vrv::Object</ref><sp/>*parent<sp/>=<sp/>NULL);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addTrill(hum::HTp<sp/>token);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addTurn(<ref refid="classvrv_1_1_object" kindref="compound">vrv::Object</ref><sp/>*linked,<sp/>hum::HTp<sp/>token);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addMordent(<ref refid="classvrv_1_1_object" kindref="compound">vrv::Object</ref><sp/>*linked,<sp/>hum::HTp<sp/>token);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addOrnaments(<ref refid="classvrv_1_1_object" kindref="compound">vrv::Object</ref><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/>hum::HTp<sp/>token);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addArpeggio(<ref refid="classvrv_1_1_object" kindref="compound">vrv::Object</ref><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/>hum::HTp<sp/>token);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>getTimingInformation(std::vector&lt;hum::HumNum&gt;<sp/>&amp;prespace,<sp/>std::vector&lt;hum::HTp&gt;<sp/>&amp;layerdata,</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hum::HumNum<sp/>layerstarttime,<sp/>hum::HumNum<sp/>layerendtime);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>convertChord(<ref refid="classvrv_1_1_chord" kindref="compound">Chord</ref><sp/>*chord,<sp/>hum::HTp<sp/>token,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>staffindex);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>prepareVerses();</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>checkForOmd(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>startline,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>endline);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handleOttavaMark(hum::HTp<sp/>token,<sp/><ref refid="classvrv_1_1_note" kindref="compound">Note</ref><sp/>*note);</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handlePedalMark(hum::HTp<sp/>token);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handleLigature(hum::HTp<sp/>token);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handleColoration(hum::HTp<sp/>token);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>prepareBeamAndTupletGroups(</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;humaux::HumdrumBeamAndTuplet&gt;<sp/>&amp;tg,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;hum::HTp&gt;<sp/>&amp;layerdata);</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>assignScalingToTupletGroup(std::vector&lt;humaux::HumdrumBeamAndTuplet<sp/>*&gt;<sp/>&amp;tggroup);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>printGroupInfo(std::vector&lt;humaux::HumdrumBeamAndTuplet&gt;<sp/>&amp;tg);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>insertTuplet(std::vector&lt;std::string&gt;<sp/>&amp;elements,<sp/>std::vector&lt;void<sp/>*&gt;<sp/>&amp;pointers,</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;humaux::HumdrumBeamAndTuplet&gt;<sp/>&amp;tgs,<sp/>std::vector&lt;hum::HTp&gt;<sp/>layerdata,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>layerindex,</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>suppressTupletNumber,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>suppressBracketTuplet);</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvrv_1_1_beam" kindref="compound">vrv::Beam</ref><sp/>*insertBeam(</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>&amp;elements,<sp/>std::vector&lt;void<sp/>*&gt;<sp/>&amp;pointers,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>humaux::HumdrumBeamAndTuplet<sp/>&amp;tg);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvrv_1_1_beam" kindref="compound">vrv::Beam</ref><sp/>*insertGBeam(</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>&amp;elements,<sp/>std::vector&lt;void<sp/>*&gt;<sp/>&amp;pointers,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>humaux::HumdrumBeamAndTuplet<sp/>&amp;tg);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>analyzeLayerBeams(</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>&amp;beamnum,<sp/>std::vector&lt;int&gt;<sp/>&amp;gbeamnum,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;hum::HTp&gt;<sp/>&amp;layerdata);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>storeBreaksec(std::vector&lt;int&gt;<sp/>&amp;beamstate,<sp/>std::vector&lt;int&gt;<sp/>&amp;gbeamstate,</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;hum::HTp&gt;<sp/>&amp;layerdata,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>grace<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setBeamDirection(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>direction,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;humaux::HumdrumBeamAndTuplet&gt;<sp/>&amp;tgs,</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;hum::HTp&gt;<sp/>&amp;layerdata,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>layerindex,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>grace);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handleGroupStarts(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;humaux::HumdrumBeamAndTuplet&gt;<sp/>&amp;tgs,<sp/>std::vector&lt;std::string&gt;<sp/>&amp;elements,</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;void<sp/>*&gt;<sp/>&amp;pointers,<sp/>std::vector&lt;hum::HTp&gt;<sp/>&amp;layerdata,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>layerindex);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>checkForTremolo(</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;hum::HTp&gt;<sp/>&amp;layerdata,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;humaux::HumdrumBeamAndTuplet&gt;<sp/>&amp;tgs,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>startindex);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handleGroupEnds(</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>humaux::HumdrumBeamAndTuplet<sp/>&amp;tg,<sp/>std::vector&lt;std::string&gt;<sp/>&amp;elements,<sp/>std::vector&lt;void<sp/>*&gt;<sp/>&amp;pointers);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handleStaffStateVariables(hum::HTp<sp/>token);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handleStaffDynamStateVariables(hum::HTp<sp/>token);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>removeTuplet(std::vector&lt;std::string&gt;<sp/>&amp;elements,<sp/>std::vector&lt;void<sp/>*&gt;<sp/>&amp;pointers);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>removeGBeam(std::vector&lt;std::string&gt;<sp/>&amp;elements,<sp/>std::vector&lt;void<sp/>*&gt;<sp/>&amp;pointers);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>removeBeam(std::vector&lt;std::string&gt;<sp/>&amp;elements,<sp/>std::vector&lt;void<sp/>*&gt;<sp/>&amp;pointers);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvrv_1_1_clef" kindref="compound">vrv::Clef</ref><sp/>*insertClefElement(</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>&amp;elements,<sp/>std::vector&lt;void<sp/>*&gt;<sp/>&amp;pointers,<sp/>hum::HTp<sp/>clef,<sp/>hum::HTp<sp/>lastnote);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>insertMeterSigElement(std::vector&lt;std::string&gt;<sp/>&amp;elements,<sp/>std::vector&lt;void<sp/>*&gt;<sp/>&amp;pointers,</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;hum::HTp&gt;<sp/>&amp;layeritems,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>processSlurs(hum::HTp<sp/>token);</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>generateSlurId(hum::HTp<sp/>token,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>number);</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>processPhrases(hum::HTp<sp/>token);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>getSlurEndNumber(hum::HTp<sp/>startslur,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>slurstartnumber);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addHarmFloatsForMeasure(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>startine,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>endline);</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addFingeringsForMeasure(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>startline,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>endline);</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>insertFingerNumberInMeasure(</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;text,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>staffindex,<sp/>hum::HTp<sp/>token,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxstaff,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aboveQ);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addStringNumbersForMeasure(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>startline,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>endline);</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addFiguredBassForMeasure(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>startline,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>endline);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>processDynamics(hum::HTp<sp/>token,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>staffindex);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>processDirections(hum::HTp<sp/>token,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>staffindex);</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>processLinkedDirection(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/>hum::HTp<sp/>token,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>staffindex);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>processGlobalDirections(hum::HTp<sp/>token,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>staffindex);</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>processChordSignifiers(<ref refid="classvrv_1_1_chord" kindref="compound">Chord</ref><sp/>*chord,<sp/>hum::HTp<sp/>token,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>staffindex);</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/>hum::HumNum<sp/>getMeasureTstamp(hum::HTp<sp/>token,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>staffindex,<sp/>hum::HumNum<sp/>frac<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/>hum::HumNum<sp/>getMeasureTstamp(hum::HTp<sp/>token,<sp/>hum::HumNum<sp/>extraduration,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>staffindex,<sp/>hum::HumNum<sp/>frac<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>hum::HumNum<sp/>getMeasureTstampPlusDur(hum::HTp<sp/>token,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>staffindex,<sp/>hum::HumNum<sp/>fract<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>hum::HumNum<sp/>getMeasureEndTstamp(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>staffindex);</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>hum::HumNum<sp/>getMeasureFactor(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>staffindex);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/>hum::HTp<sp/>getPreviousDataToken(hum::HTp<sp/>token);</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>hum::HTp<sp/>getHairpinEnd(hum::HTp<sp/>token,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;endchar);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>hum::HTp<sp/>getDecrescendoEnd(hum::HTp<sp/>token);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>hum::HTp<sp/>getCrescendoEnd(hum::HTp<sp/>token);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>getMeasureDifference(hum::HTp<sp/>starttok,<sp/>hum::HTp<sp/>endtok);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>storeOriginalClefMensurationKeyApp();</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addSpace(std::vector&lt;std::string&gt;<sp/>&amp;elements,<sp/>std::vector&lt;void<sp/>*&gt;<sp/>&amp;pointers,<sp/>hum::HumNum<sp/>duration);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setLocationId(<ref refid="classvrv_1_1_object" kindref="compound">vrv::Object</ref><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/>hum::HTp<sp/>token,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>subtoken<sp/>=<sp/>-1);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setLocationId(<ref refid="classvrv_1_1_object" kindref="compound">vrv::Object</ref><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lineindex,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fieldindex,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>subtokenindex);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>getLocationId(<ref refid="classvrv_1_1_object" kindref="compound">vrv::Object</ref><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/>hum::HTp<sp/>token,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>subtoken<sp/>=<sp/>-1);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>getLocationId(<ref refid="classvrv_1_1_object" kindref="compound">Object</ref><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lineindex,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fieldindex,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>subtokenindex);</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>getLocationId(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;prefix,<sp/>hum::HTp<sp/>token,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>subtoken<sp/>=<sp/>-1);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>getLocationId(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;prefix,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lineindex,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fieldindex,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>subtokenindex);</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setLocationIdNSuffix(<ref refid="classvrv_1_1_object" kindref="compound">vrv::Object</ref><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/>hum::HTp<sp/>token,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>number);</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setSlurLocationId(</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvrv_1_1_object" kindref="compound">vrv::Object</ref><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/>hum::HTp<sp/>slurstart,<sp/>hum::HTp<sp/>slurend,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eindex,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;prefix<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setTieLocationId(<ref refid="classvrv_1_1_object" kindref="compound">vrv::Object</ref><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/>hum::HTp<sp/>tiestart,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sindex,<sp/>hum::HTp<sp/>tieend,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eindex);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setBeamLocationId(<ref refid="classvrv_1_1_object" kindref="compound">vrv::Object</ref><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;humaux::HumdrumBeamAndTuplet&gt;<sp/>&amp;tgs,</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;hum::HTp&gt;<sp/>&amp;layerdata,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>startindex);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setTupletLocationId(<ref refid="classvrv_1_1_object" kindref="compound">vrv::Object</ref><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;humaux::HumdrumBeamAndTuplet&gt;<sp/>&amp;tgs,</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;hum::HTp&gt;<sp/>&amp;layerdata,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>startindex);</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addMidiTempo(<ref refid="classvrv_1_1_score_def" kindref="compound">vrv::ScoreDef</ref><sp/>&amp;m_scoreDef,<sp/>hum::HTp<sp/>kernpart,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>top,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bot);</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addInstrumentDefinition(<ref refid="classvrv_1_1_staff_def" kindref="compound">vrv::StaffDef</ref><sp/>*staffdef,<sp/>hum::HTp<sp/>partstart);</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addOrnamentMarkers(hum::HTp<sp/>token);</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setNextLeftBarStyle(data_BARRENDITION<sp/>style);</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>parseSignifiers(hum::HumdrumFile<sp/>&amp;infile);</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>getAutoClef(hum::HTp<sp/>partstart,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>partnumber);</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>colorNote(<ref refid="classvrv_1_1_note" kindref="compound">vrv::Note</ref><sp/>*note,<sp/>hum::HTp<sp/>token,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;subtoken,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>field);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>colorRest(<ref refid="classvrv_1_1_rest" kindref="compound">vrv::Rest</ref><sp/>*rest,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;token,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>field);</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>colorVerse(<ref refid="classvrv_1_1_verse" kindref="compound">Verse</ref><sp/>*verse,<sp/>std::string<sp/>&amp;token);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>getSpineColor(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>field);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>checkForColorSpine(hum::HumdrumFile<sp/>&amp;infile);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>analyzeMultiRest(hum::HumdrumFile<sp/>&amp;infile);</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>analyzeBreaks(hum::HumdrumFile<sp/>&amp;infile);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addSystemKeyTimeChange(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>startline,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>endline);</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>prepareSections();</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>getDirection(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;token,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;target);</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>resolveTupletBeamTie(std::vector&lt;humaux::HumdrumBeamAndTuplet&gt;<sp/>&amp;tg);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>resolveTupletBeamStartTie(std::vector&lt;humaux::HumdrumBeamAndTuplet&gt;<sp/>&amp;tg,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>resolveTupletBeamEndTie(std::vector&lt;humaux::HumdrumBeamAndTuplet&gt;<sp/>&amp;tg,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>mergeTupletsCuttingBeam(std::vector&lt;humaux::HumdrumBeamAndTuplet&gt;<sp/>&amp;tg);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>embedQstampInClass(<ref refid="classvrv_1_1_note" kindref="compound">vrv::Note</ref><sp/>*note,<sp/>hum::HTp<sp/>token,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;tstring);</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>embedQstampInClass(<ref refid="classvrv_1_1_rest" kindref="compound">vrv::Rest</ref><sp/>*note,<sp/>hum::HTp<sp/>token,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;tstring);</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>embedQstampInClass(<ref refid="classvrv_1_1_m_rest" kindref="compound">vrv::MRest</ref><sp/>*mrest,<sp/>hum::HTp<sp/>token,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;tstring);</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>embedQstampInClass(<ref refid="classvrv_1_1_space" kindref="compound">vrv::Space</ref><sp/>*irest,<sp/>hum::HTp<sp/>token,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;tstring);</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>embedPitchInformationInClass(<ref refid="classvrv_1_1_note" kindref="compound">vrv::Note</ref><sp/>*note,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;token);</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>embedTieInformation(<ref refid="classvrv_1_1_note" kindref="compound">Note</ref><sp/>*note,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;token);</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>splitSyllableBySpaces(vector&lt;std::string&gt;<sp/>&amp;vtext,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>spacer<sp/>=<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addDefaultTempo(<ref refid="classvrv_1_1_score_def" kindref="compound">ScoreDef</ref><sp/>&amp;m_scoreDef);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>getChordNoteCount(hum::HTp<sp/>token);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isLowestSystemArpeggio(hum::HTp<sp/>token);</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>leftmostStaffArpeggio(hum::HTp<sp/>token);</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/>hum::HTp<sp/>getHighestSystemArpeggio(hum::HTp<sp/>token);</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/>hum::HTp<sp/>getRightmostStaffArpeggio(hum::HTp<sp/>token);</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addDirection(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;text,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;placement,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bold,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>italic,<sp/>hum::HTp<sp/>token,</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>staffindex,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>justification<sp/>=<sp/>0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;color<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vgroup<sp/>=<sp/>-1);</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>addTempoDirection(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;text,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;placement,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bold,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>italic,</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hum::HTp<sp/>token,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>staffindex,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>justification,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;color);</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>setTempoContent(<ref refid="classvrv_1_1_tempo" kindref="compound">Tempo</ref><sp/>*tempo,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;text);</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>setLabelContent(<ref refid="classvrv_1_1_label" kindref="compound">Label</ref><sp/>*label,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;text);</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>convertMusicSymbolNameToSmuflEntity(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;text);</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>processTerminalLong(hum::HTp<sp/>token);</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>removeCharacter(hum::HTp<sp/>token,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>removechar);</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>getSystemDecoration(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;tag);</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>processStaffDecoration(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;decoration);</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>getStaffNumberLabel(hum::HTp<sp/>spinestart);</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>getGroupNumberLabel(hum::HTp<sp/>spinestart);</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>getPartNumberLabel(hum::HTp<sp/>spinestart);</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isFirstTokenOnStaff(hum::HTp<sp/>token);</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasAboveParameter(hum::HTp<sp/>token,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;category);</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasAboveParameter(hum::HTp<sp/>token,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;category,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;output);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasBelowParameter(hum::HTp<sp/>token,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;category);</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasBelowParameter(hum::HTp<sp/>token,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;category,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;output);</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasCenterParameter(hum::HTp<sp/>token,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;category,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;output);</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>prepareHeaderFooter();</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>prepareHeader(</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::pair&lt;std::string,<sp/>std::string&gt;&gt;<sp/>&amp;biblist,<sp/>std::map&lt;std::string,<sp/>std::string&gt;<sp/>&amp;refmap);</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>prepareFooter(</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::pair&lt;std::string,<sp/>std::string&gt;&gt;<sp/>&amp;biblist,<sp/>std::map&lt;std::string,<sp/>std::string&gt;<sp/>&amp;refmap);</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>processReferenceTemplate(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;input,</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::pair&lt;std::string,<sp/>std::string&gt;&gt;<sp/>&amp;biblist,<sp/>std::map&lt;std::string,<sp/>std::string&gt;<sp/>&amp;refmap);</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>processTemplateOperator(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;value,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;op);</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>automaticHeaderLeft(std::vector&lt;std::pair&lt;std::string,<sp/>std::string&gt;&gt;<sp/>&amp;biblist,</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;std::string,<sp/>std::string&gt;<sp/>&amp;refmap,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>linecount);</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>automaticHeaderCenter(</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::pair&lt;std::string,<sp/>std::string&gt;&gt;<sp/>&amp;biblist,<sp/>std::map&lt;std::string,<sp/>std::string&gt;<sp/>&amp;refmap);</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>automaticHeaderRight(std::vector&lt;std::pair&lt;std::string,<sp/>std::string&gt;&gt;<sp/>&amp;biblist,</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;std::string,<sp/>std::string&gt;<sp/>&amp;refmap,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;linecount);</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>convertMensuralToken(</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>&amp;elements,<sp/>std::vector&lt;void<sp/>*&gt;<sp/>&amp;pointers,<sp/>hum::HTp<sp/>token,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>staffindex);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>initializeSpineColor(hum::HumdrumFile<sp/>&amp;infile);</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setStemLength(<ref refid="classvrv_1_1_note" kindref="compound">Note</ref><sp/>*note,<sp/>hum::HTp<sp/>token);</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>storeExpansionLists(<ref refid="classvrv_1_1_section" kindref="compound">Section</ref><sp/>*section,<sp/>hum::HTp<sp/>starting);</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>getStaffAdjustment(hum::HTp<sp/>token);</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>calculateNoteIdForSlur(std::string<sp/>&amp;idstring,<sp/>std::vector&lt;pair&lt;int,<sp/>int&gt;&gt;<sp/>&amp;sortednotes,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>promoteInstrumentNamesToGroup();</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>promoteInstrumentsForStaffGroup(<ref refid="classvrv_1_1_staff_grp" kindref="compound">StaffGrp</ref><sp/>*group);</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>promoteInstrumentAbbreviationsToGroup();</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>promoteInstrumentAbbreviationsForStaffGroup(<ref refid="classvrv_1_1_staff_grp" kindref="compound">StaffGrp</ref><sp/>*group);</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setGroupSymbol(<ref refid="classvrv_1_1_staff_grp" kindref="compound">StaffGrp</ref><sp/>*sg,<sp/>staffGroupingSym_SYMBOL<sp/>symbol);</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>getInstrumentName(<ref refid="classvrv_1_1_staff_def" kindref="compound">StaffDef</ref><sp/>*sd);</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>getInstrumentAbbreviation(<ref refid="classvrv_1_1_staff_def" kindref="compound">StaffDef</ref><sp/>*sd);</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>getInstrumentClass(hum::HTp<sp/>start);</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>removeInstrumentName(<ref refid="classvrv_1_1_staff_def" kindref="compound">StaffDef</ref><sp/>*sd);</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>removeInstrumentAbbreviation(<ref refid="classvrv_1_1_staff_def" kindref="compound">StaffDef</ref><sp/>*sd);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>getEndIdForOttava(hum::HTp<sp/>token);</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>prepareInitialOttavas(hum::HTp<sp/>measure);</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>linkFingeringToNote(<ref refid="classvrv_1_1_dir" kindref="compound">Dir</ref><sp/>*dir,<sp/>hum::HTp<sp/>token,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xstaffindex);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>checkForTupletForcedBreak(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;hum::HTp&gt;<sp/>&amp;duritems,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>extractSlurNoteAttachmentInformation(std::vector&lt;std::pair&lt;int,<sp/>bool&gt;&gt;<sp/>&amp;data,<sp/>hum::HTp<sp/>token,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>slurtype);</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>extractPhraseNoteAttachmentInformation(</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::pair&lt;int,<sp/>bool&gt;&gt;<sp/>&amp;data,<sp/>hum::HTp<sp/>token,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>phrasetype);</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>getNoteStateSlur(hum::HTp<sp/>token,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>slurnumber);</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>getNoteStatePhrase(hum::HTp<sp/>token,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>phrasenumber);</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>assignVerticalGroup(<ref refid="classvrv_1_1_pedal" kindref="compound">Pedal</ref><sp/>*ped,<sp/>hum::HTp<sp/>token);</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>storeAcclev(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>staffindex);</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>storeStemInterpretation(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>staffindex,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>layernumber);</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>getBooleanParameter(hum::HTp<sp/>token,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;category,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;key);</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>getStringParameter(hum::HTp<sp/>token,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;category,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;key);</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>shouldHideBeamBracket(</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;humaux::HumdrumBeamAndTuplet&gt;<sp/>&amp;tgs,<sp/>std::vector&lt;hum::HTp&gt;<sp/>&amp;layerdata,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>layerindex);</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>checkBeamWith(<ref refid="classvrv_1_1_beam" kindref="compound">Beam</ref><sp/>*beam,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;humaux::HumdrumBeamAndTuplet&gt;<sp/>&amp;tgs,</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;hum::HTp&gt;<sp/>&amp;layerdata,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>startindex);</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>getTrackText(hum::HTp<sp/>token);</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>checkForLayoutBreak(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line);</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>removeCommas(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;input);</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>extractNullInformation(vector&lt;bool&gt;<sp/>&amp;nulls,<sp/>hum::HumdrumFile<sp/>&amp;infile);</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>initializeIgnoreVector(hum::HumdrumFile<sp/>&amp;infile);</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasIndent(hum::HTp<sp/>tok);</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>prepareNonStandardKeySignature(<ref refid="classvrv_1_1_key_sig" kindref="compound">KeySig</ref><sp/>*vrvkeysig,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;ks,<sp/>hum::HTp<sp/>keytok);</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>fixLargeTuplets(std::vector&lt;humaux::HumdrumBeamAndTuplet&gt;<sp/>&amp;tg);</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addSlurLineStyle(<ref refid="classvrv_1_1_slur" kindref="compound">Slur</ref><sp/>*element,<sp/>hum::HTp<sp/>token,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>slurindex);</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addTieLineStyle(<ref refid="classvrv_1_1_tie" kindref="compound">Tie</ref><sp/>*element,<sp/>hum::HTp<sp/>token,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>noteindex);</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setAccid(<ref refid="classvrv_1_1_accid" kindref="compound">Accid</ref><sp/>*accid,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;loaccid);</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>phraseIsInvisible(hum::HTp<sp/>token,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pindex);</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/>hum::HumNum<sp/>getLeftNoteDuration(hum::HTp<sp/>token);</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>checkClefBufferForSameAs();</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>suppressBufferedClef(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addExplicitStemDirection(<ref refid="classvrv_1_1_f_trem" kindref="compound">FTrem</ref><sp/>*ftrem,<sp/>hum::HTp<sp/>start);</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addSlur(<ref refid="classvrv_1_1_f_trem" kindref="compound">FTrem</ref><sp/>*ftrem,<sp/>hum::HTp<sp/>start,<sp/>hum::HTp<sp/>ending);</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addFTremSlurs();</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>getStaffNumbers(std::string<sp/>&amp;deco);</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>insertRepetitionElement(</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;string&gt;<sp/>&amp;elements,<sp/>std::vector&lt;void<sp/>*&gt;<sp/>&amp;pointers,<sp/>std::vector&lt;hum::HTp&gt;<sp/>tokens,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setRepeatSlashes(<ref refid="classvrv_1_1_beat_rpt" kindref="compound">BeatRpt</ref><sp/>*repeat,<sp/>std::vector&lt;hum::HTp&gt;<sp/>&amp;tokens,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>getLabelFromInstrumentCode(hum::HTp<sp/>icode,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;transpose);</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>checkForRehearsal(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line);</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isBlackNotation(hum::HTp<sp/>starting);</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>checkNoteForScordatura(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;token);</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>checkForScordatura(hum::HumdrumFile<sp/>&amp;infile);</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>adjustMeasureTimings(hum::HumdrumFile<sp/>&amp;infile);</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>fillEmptyLayer(</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>staffindex,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>layerindex,<sp/>std::vector&lt;std::string&gt;<sp/>&amp;elements,<sp/>std::vector&lt;void<sp/>*&gt;<sp/>&amp;pointers);</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>processOverfillingNotes(hum::HTp<sp/>token);</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isNextBarIgnored(hum::HTp<sp/>token);</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>hideTerminalBarlines(hum::HumdrumFile<sp/>&amp;infile);</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>hideBarlinesInTiedGroup(hum::HTp<sp/>startnote);</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>getMultiEndline(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>startindex);</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>processHangingTieEnd(</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvrv_1_1_note" kindref="compound">Note</ref><sp/>*note,<sp/>hum::HTp<sp/>token,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;tstring,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>subindex,<sp/>hum::HumNum<sp/>meterunit);</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>processHangingTieStarts();</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>processHangingTieStart(humaux::HumdrumTie<sp/>&amp;tieinfo);</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>atEndingBoundaryStart(hum::HTp<sp/>token);</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>atEndingBoundaryEnd(hum::HTp<sp/>token);</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvrv_1_1_tie" kindref="compound">Tie</ref><sp/>*tieToPreviousItem(hum::HTp<sp/>token,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>subindex,<sp/>hum::HumNum<sp/>meterunit);</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvrv_1_1_tie" kindref="compound">Tie</ref><sp/>*addHangingTieToNextItem(hum::HTp<sp/>token,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>subindex,<sp/>hum::HumNum<sp/>meterunit,<sp/><ref refid="classvrv_1_1_measure" kindref="compound">Measure</ref><sp/>*measure);</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>inDifferentEndings(hum::HTp<sp/>token1,<sp/>hum::HTp<sp/>token2);</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>checkIfSlurIsInvisible(hum::HTp<sp/>token,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>number);</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>checkForTupletMergesAndSplits(std::vector&lt;int&gt;<sp/>&amp;tupletgroups,<sp/>std::vector&lt;hum::HTp&gt;<sp/>&amp;duritems,</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;hum::HumNum&gt;<sp/>&amp;durations,<sp/>std::vector&lt;bool&gt;<sp/>&amp;durforce);</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasLayoutParameter(hum::HTp<sp/>token,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;category,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;param);</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>assignTupletScalings(std::vector&lt;humaux::HumdrumBeamAndTuplet&gt;<sp/>&amp;tg);</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>getLayoutParameter(hum::HTp<sp/>token,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;category,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;catkey,</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&amp;trueString,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&amp;falseString<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>analyzeClefNulls(hum::HumdrumFile<sp/>&amp;infile);</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>markAdjacentNullsWithClef(hum::HTp<sp/>clef);</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>markOtherClefsAsChange(hum::HTp<sp/>clef);</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>getCurrentLayerCount(hum::HTp<sp/>token);</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>checkForBreak(hum::HumdrumFile<sp/>&amp;infile,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line);</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>getLowestDiatonicPitch(hum::HTp<sp/>token,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&amp;requirement);</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>getHighestDiatonicPitch(hum::HTp<sp/>token,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&amp;requirement);</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasMensuralStaff(hum::HLp<sp/>line);</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>getNextBarlineIndex(hum::HumdrumFile<sp/>&amp;infile,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>startline);</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>escapeFreeAmpersand(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;value);</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addHairpinAccent(hum::HTp<sp/>token);</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handleCustos(</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;string&gt;<sp/>&amp;elements,<sp/>std::vector&lt;void<sp/>*&gt;<sp/>&amp;pointers,<sp/>std::vector&lt;hum::HTp&gt;<sp/>tokens,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/>hum::HTp<sp/>getAssociatedDynamSpine(hum::HTp<sp/>stafftok);</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/>hum::HTp<sp/>getPreviousStaffToken(hum::HTp<sp/>parttok);</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>checkForVerseLabels(hum::HTp<sp/>token);</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;hum::HTp&gt;<sp/>getVerseLabels(hum::HTp<sp/>token,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>staff);</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>getVerseLabelText(hum::HTp<sp/>token);</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addPlicaUp(<ref refid="classvrv_1_1_note" kindref="compound">Note</ref><sp/>*note);</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addPlicaDown(<ref refid="classvrv_1_1_note" kindref="compound">Note</ref><sp/>*note);</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setLayoutSlurDirection(<ref refid="classvrv_1_1_slur" kindref="compound">Slur</ref><sp/>*slur,<sp/>hum::HTp<sp/>token);</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setFontStyle(<ref refid="classvrv_1_1_rend" kindref="compound">Rend</ref><sp/>*rend,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&amp;fontstyle);</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>importVerovioOptions(<ref refid="classvrv_1_1_doc" kindref="compound">Doc</ref><sp/>*doc);</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>adjustChordNoteDurations(<ref refid="classvrv_1_1_chord" kindref="compound">Chord</ref><sp/>*chord,<sp/>std::vector&lt;Note<sp/>*&gt;<sp/>&amp;notes,<sp/>std::vector&lt;string&gt;<sp/>&amp;tstrings);</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>adjustChordNoteDuration(<ref refid="classvrv_1_1_note" kindref="compound">Note</ref><sp/>*note,<sp/>hum::HumNum<sp/>hdur,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dur,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dots,<sp/>hum::HumNum<sp/>chorddur,</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&amp;tstring,<sp/>hum::HumNum<sp/>factor);</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setNoteMeiDur(<ref refid="classvrv_1_1_note" kindref="compound">Note</ref><sp/>*note,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>meidur);</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>storeExpansionListsInChoice(<ref refid="classvrv_1_1_section" kindref="compound">Section</ref><sp/>*section,<sp/>std::vector&lt;hum::HTp&gt;<sp/>&amp;expansions);</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>getMmTempo(hum::HTp<sp/>token,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>checklast<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>getMmTempoForward(hum::HTp<sp/>token);</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isNearOmd(hum::HTp<sp/>token);</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handleTempoChange(hum::HTp<sp/>token);</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasTempoTextAfter(hum::HTp<sp/>token);</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isTempoishText(hum::HTp<sp/>token);</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isLastStaffTempo(hum::HTp<sp/>token);</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addMensuralQuality(<ref refid="classvrv_1_1_note" kindref="compound">Note</ref><sp/>*note,<sp/>hum::HTp<sp/>token);</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>checkForMens(hum::HumdrumFile<sp/>&amp;infile);</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>layerOnlyContainsNullStuff(std::vector&lt;hum::HTp&gt;<sp/>&amp;data);</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>getNoteStaff(hum::HTp<sp/>token,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>homestaff);</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addBarLineElement(hum::HTp<sp/>bartok,<sp/>std::vector&lt;std::string&gt;<sp/>&amp;elements,<sp/>std::vector&lt;void<sp/>*&gt;<sp/>&amp;pointers);</highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>header<sp/>related<sp/>functions:<sp/>///////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>createHeader();</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>insertTitle(pugi::xml_node<sp/>&amp;titleStmt,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;hum::HumdrumLine<sp/>*&gt;<sp/>&amp;references);</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>insertExtMeta(std::vector&lt;hum::HumdrumLine<sp/>*&gt;<sp/>&amp;references);</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addPerson(std::vector&lt;std::vector&lt;std::string&gt;&gt;<sp/>&amp;respPeople,<sp/>std::vector&lt;hum::HumdrumLine<sp/>*&gt;<sp/>&amp;references,</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;key,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;role);</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>getRespPeople(std::vector&lt;std::vector&lt;std::string&gt;&gt;<sp/>&amp;respPeople,<sp/>std::vector&lt;hum::HumdrumLine<sp/>*&gt;<sp/>&amp;references);</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>insertRespStmt(pugi::xml_node<sp/>&amp;titleStmt,<sp/>std::vector&lt;std::vector&lt;std::string&gt;&gt;<sp/>&amp;respPeople);</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>insertPeople(pugi::xml_node<sp/>&amp;work,<sp/>std::vector&lt;std::vector&lt;std::string&gt;&gt;<sp/>&amp;respPeople);</highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ELEMENT&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classvrv_1_1_humdrum_input_1aeab1fa55b027b749bece352ef47b8ed3" kindref="member">verticalRest</ref>(ELEMENT<sp/>rest,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;token);</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ELEMENT&gt;</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setKeySig(</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>partindex,<sp/>ELEMENT<sp/>element,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;keysig,<sp/>hum::HTp<sp/>keysigtok,<sp/>hum::HTp<sp/>keytok,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>secondary);</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ELEMENT&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setKeySig(ELEMENT<sp/>*element,<sp/>hum::HTp<sp/>keysigtok);</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>PARENT,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CHILD&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>appendElement(PARENT<sp/>parent,<sp/>CHILD<sp/>child);</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ELEMENT&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addArticulations(ELEMENT<sp/>element,<sp/>hum::HTp<sp/>token);</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ELEMENT&gt;<sp/>hum::HumNum<sp/>convertRhythm(ELEMENT<sp/>element,<sp/>hum::HTp<sp/>token,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>subtoken<sp/>=<sp/>-1);</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ELEMENT&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setRhythmFromDuration(ELEMENT<sp/>element,<sp/>hum::HumNum<sp/>dur);</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ELEMENT&gt;<sp/>hum::HumNum<sp/>convertMensuralRhythm(ELEMENT<sp/>element,<sp/>hum::HTp<sp/>token,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>subtoken<sp/>=<sp/>-1);</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ELEMENT&gt;<sp/>hum::HumNum<sp/>setDuration(ELEMENT<sp/>element,<sp/>hum::HumNum<sp/>duration);</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ELEMENT&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setStaff(ELEMENT<sp/>element,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>staffnum);</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ELEMENT&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setStaffBetween(ELEMENT<sp/>element,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>staffnum);</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ELEMENT&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setN(ELEMENT<sp/>element,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nvalue,<sp/>hum::HTp<sp/>tok<sp/>=<sp/>NULL);</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ELEMENT&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>assignAutomaticStem(ELEMENT<sp/>element,<sp/>hum::HTp<sp/>tok,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>staffindex);</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ELEMENT&gt;<sp/><ref refid="classvrv_1_1_key_sig" kindref="compound">KeySig</ref><sp/>*getKeySig(ELEMENT<sp/>element);</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ELEMENT&gt;<sp/><ref refid="classvrv_1_1_meter_sig" kindref="compound">MeterSig</ref><sp/>*getMeterSig(ELEMENT<sp/>element);</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ELEMENT&gt;<sp/><ref refid="classvrv_1_1_clef" kindref="compound">Clef</ref><sp/>*getClef(ELEMENT<sp/>element);</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ELEMENT&gt;<sp/><ref refid="classvrv_1_1_mensur" kindref="compound">Mensur</ref><sp/>*getMensur(ELEMENT<sp/>element,<sp/>hum::HTp<sp/>token<sp/>=<sp/>NULL);</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ELEMENT&gt;</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>insertPhrase(ELEMENT<sp/>phrase,<sp/>hum::HTp<sp/>phrasestart,<sp/>hum::HTp<sp/>phraseend,<sp/><ref refid="classvrv_1_1_measure" kindref="compound">Measure</ref><sp/>*startmeasure,</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;pair&lt;int,<sp/>int&gt;&gt;<sp/>&amp;endchordsorted,<sp/>std::vector&lt;std::pair&lt;int,<sp/>int&gt;&gt;<sp/>&amp;startchordsorted,</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;pair&lt;int,<sp/>bool&gt;&gt;<sp/>&amp;phrasestartnoteinfo,<sp/>std::vector&lt;pair&lt;int,<sp/>bool&gt;&gt;<sp/>&amp;phraseendnoteinfo,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ndex,</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::vector&lt;int&gt;&gt;<sp/>&amp;phraseindex,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j,<sp/>std::vector&lt;int&gt;<sp/>&amp;startpitches,</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>&amp;endpitches,<sp/>std::vector&lt;bool&gt;<sp/>&amp;indexused);</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ELEMENT&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>convertVerses(ELEMENT<sp/>element,<sp/>hum::HTp<sp/>token);</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ELEMENT&gt;</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setTimeSig(ELEMENT<sp/>element,<sp/>hum::HTp<sp/>timesigtok,<sp/>hum::HTp<sp/>metersigtok,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>staffindex);</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ELEMENT&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addChildBackMeasureOrSection(ELEMENT<sp/>element);</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ELEMENT&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addChildMeasureOrSection(ELEMENT<sp/>element);</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CHILD&gt;</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>appendElement(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;<sp/>&amp;name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;void<sp/>*&gt;<sp/>&amp;pointers,<sp/>CHILD<sp/>child);</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>popElementStack(std::vector&lt;std::string&gt;<sp/>&amp;elements,<sp/>std::vector&lt;void<sp/>*&gt;<sp/>&amp;pointers);</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ELEMENT&gt;</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addTextElement(</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ELEMENT<sp/>*element,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;content,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;fontstyle<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>addSpacer<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ELEMENT&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addVerovioTextElement(ELEMENT<sp/>*element,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;musictext);</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ELEMENT&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>checkForAutoStem(ELEMENT<sp/>element,<sp/>hum::HTp<sp/>token);</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ELEMENT&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>appendTypeTag(ELEMENT<sp/>*element,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;tag);</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ELEMENT&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setPlaceRelStaff(ELEMENT<sp/>*element,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;place,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>showplace);</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ELEMENT&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setPlaceRelEvent(ELEMENT<sp/>*element,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;place,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>showplace);</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ELEMENT&gt;</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setMeterSymbol(ELEMENT<sp/>*element,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;metersig,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>staffindex,<sp/>hum::HTp<sp/>partstart<sp/>=<sp/>NULL,</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hum::HTp<sp/>metertok<sp/>=<sp/>NULL);</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ELEMENT&gt;</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setMensurationSymbol(ELEMENT<sp/>*element,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;metersig,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>staffindex,<sp/>hum::HTp<sp/>mensurtok<sp/>=<sp/>NULL);</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ELEMENT&gt;</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setInstrumentName(ELEMENT<sp/>*staffdef,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;name,<sp/>hum::HTp<sp/>labeltok<sp/>=<sp/>NULL);</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ELEMENT&gt;</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setInstrumentAbbreviation(ELEMENT<sp/>*staffdef,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;name,<sp/>hum::HTp<sp/>abbrtok);</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ELEMENT&gt;</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>insertTwoRhythmsAndTextBetween(</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ELEMENT<sp/>*element,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;note1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;text,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;note2);</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ELEMENT&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addDurRecip(ELEMENT<sp/>element,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;ttoken);</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ELEMENT&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addFermata(ELEMENT<sp/>*rest,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;tstring);</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ELEMENT&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>storeExpansionList(ELEMENT<sp/>*parent,<sp/>hum::HTp<sp/>etok);</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ELEMENT&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setWrittenAccidentalUpper(ELEMENT<sp/>element,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&amp;value);</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ELEMENT&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setWrittenAccidentalLower(ELEMENT<sp/>element,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&amp;value);</highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="classvrv_1_1_humdrum_input_1a3a9cb0e5cf601ccbe32c261cd96b5ab0" kindref="member">unescapeHtmlEntities</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;input);</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>WriteUTF8(std::ostream<sp/>&amp;Out,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Ch);</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>UnquoteHTML(std::istream<sp/>&amp;In,<sp/>std::ostream<sp/>&amp;Out);</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>hum::HumNum<sp/>removeFactorsOfTwo(hum::HumNum<sp/>value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;tcount,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;bcount);</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>getDotPowerOfTwo(hum::HumNum<sp/>value);</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nextLowerPowerOfTwo(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x);</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>hum::HumNum<sp/>nextHigherPowerOfTwo(hum::HumNum<sp/>x);</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>getDateString();</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>getReferenceValue(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;key,<sp/>std::vector&lt;hum::HumdrumLine<sp/>*&gt;<sp/>&amp;references);</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>replace(std::string<sp/>&amp;str,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;oldStr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;newStr);</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>replace(std::wstring<sp/>&amp;str,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::wstring<sp/>&amp;oldStr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::wstring<sp/>&amp;newStr);</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/>std::wstring<sp/>cleanHarmString(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;content);</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/>std::wstring<sp/>cleanHarmString2(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;content);</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/>std::wstring<sp/>cleanHarmString3(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;content);</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/>std::wstring<sp/>cleanStringString(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;content);</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::wstring&gt;<sp/>cleanFBString(std::vector&lt;std::string&gt;<sp/>&amp;pieces,<sp/>hum::HTp<sp/>token);</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/>std::wstring<sp/>cleanFBString2(std::vector&lt;std::string&gt;<sp/>&amp;pieces,<sp/>hum::HTp<sp/>token);</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>splitFBString(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;content,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;separator<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/>std::wstring<sp/>getVisualFBAccidental(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>accidental);</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/>std::wstring<sp/>convertFBNumber(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;input,<sp/>hum::HTp<sp/>token);</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>checkForLineContinuations(hum::HTp<sp/>token);</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/>std::wstring<sp/>convertNumberToWstring(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>number);</highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m_filename<sp/>==<sp/>Filename<sp/>to<sp/>read/was<sp/>read.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>m_filename;</highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m_debug<sp/>==<sp/>mostly<sp/>for<sp/>printing<sp/>MEI<sp/>data<sp/>to<sp/>standard<sp/>input.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m_debug<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="826"><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m_comment<sp/>==<sp/>Display<sp/>**kern<sp/>data<sp/>embedded<sp/>in<sp/>comments<sp/>for<sp/>each</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>staff<sp/>layer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m_comment<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m_doc<sp/>is<sp/>inherited<sp/>root<sp/>document<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m_score<sp/>stores<sp/>the<sp/>music</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvrv_1_1_score" kindref="compound">Score</ref><sp/>*m_score<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m_sections<sp/>stores<sp/>segments<sp/>of<sp/>the<sp/>music</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Section<sp/>*&gt;<sp/>m_sections;</highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m_lastsection<sp/>==<sp/>The<sp/>section<sp/>label<sp/>of<sp/>the<sp/>previous<sp/>measure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>m_lastsection;</highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>State<sp/>variables<sp/>for<sp/>doing<sp/>the<sp/>conversion<sp/>without<sp/>having<sp/>to<sp/>pass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>these<sp/>variables<sp/>as<sp/>parameters:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m_staffgroup<sp/>==<sp/>information<sp/>about<sp/>parts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>longer<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>vrv::StaffGrp<sp/>*m_staffgroup<sp/>=<sp/>NULL;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m_staffdef<sp/>==<sp/>information<sp/>about<sp/>a<sp/>staff.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;vrv::StaffDef<sp/>*&gt;<sp/>m_staffdef;</highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;vrv::Measure<sp/>*&gt;<sp/>m_measures;</highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m_measure<sp/>==<sp/>current<sp/>measure,<sp/>or<sp/>NULL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvrv_1_1_measure" kindref="compound">vrv::Measure</ref><sp/>*m_measure<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m_staff<sp/>==<sp/>current<sp/>staff,<sp/>or<sp/>NULL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvrv_1_1_staff" kindref="compound">vrv::Staff</ref><sp/>*m_staff<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m_currentstaff<sp/>==<sp/>The<sp/>current<sp/>staff<sp/>being<sp/>parsed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m_currentstaff<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m_layer<sp/>==<sp/>current<sp/>layer,<sp/>or<sp/>NULL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvrv_1_1_layer" kindref="compound">vrv::Layer</ref><sp/>*m_layer<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="868"><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m_currentlayer;</highlight></codeline>
<codeline lineno="870"><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m_layertokens<sp/>==<sp/>Humdrum<sp/>**kern<sp/>tokens<sp/>for<sp/>each<sp/>staff/layer<sp/>to<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>converted.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::vector&lt;std::vector&lt;hum::HTp&gt;&gt;&gt;<sp/>m_layertokens;</highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m_staffstarts<sp/>==<sp/>list<sp/>of<sp/>tracks<sp/>in<sp/>Humdrum<sp/>file<sp/>being<sp/>parsed<sp/>which</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>contain<sp/>**kern,<sp/>**mens<sp/>data<sp/>or<sp/>whatever<sp/>other<sp/>data<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>will<sp/>be<sp/>converted<sp/>into<sp/>a<sp/>staff<sp/>in<sp/>the<sp/>conversion<sp/>to<sp/>MEI.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;hum::HTp&gt;<sp/>m_staffstarts;</highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m_rkern<sp/>==<sp/>reverse<sp/>mapping<sp/>of<sp/>Humdrum<sp/>track<sp/>to<sp/>staff<sp/>number..</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>m_rkern;</highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m_infiles<sp/>==<sp/>Humdrum<sp/>file<sp/>used<sp/>for<sp/>conversion.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/>hum::HumdrumFileSet<sp/>m_infiles;</highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m_timesigdurs<sp/>==<sp/>Prevailing<sp/>time<sp/>signature<sp/>duration<sp/>of<sp/>measure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;hum::HumNum&gt;<sp/>m_timesigdurs;</highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m_tupletscaling<sp/>==<sp/>tuplet-scaling<sp/>factor<sp/>for<sp/>the<sp/>current<sp/>note.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/>hum::HumNum<sp/>m_tupletscaling<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="891"><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m_omd<sp/>==<sp/>temporary<sp/>variable<sp/>for<sp/>printing<sp/>tempo<sp/>designation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/>hum::HumNum<sp/>m_omd<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m_oclef<sp/>==<sp/>temporary<sp/>variable<sp/>for<sp/>printing<sp/>&quot;original-clef&quot;<sp/>&lt;app&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::pair&lt;int,<sp/>hum::HTp&gt;&gt;<sp/>m_oclef;</highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m_omet<sp/>==<sp/>temporary<sp/>variable<sp/>for<sp/>printing<sp/>&quot;original-mensuration&quot;<sp/>&lt;app&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::pair&lt;int,<sp/>hum::HTp&gt;&gt;<sp/>m_omet;</highlight></codeline>
<codeline lineno="900"><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m_okey<sp/>==<sp/>temporary<sp/>variable<sp/>for<sp/>printing<sp/>&quot;original-key&quot;<sp/>&lt;app&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::pair&lt;int,<sp/>hum::HTp&gt;&gt;<sp/>m_okey;</highlight></codeline>
<codeline lineno="903"><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m_staffstates<sp/>==<sp/>state<sp/>variables<sp/>for<sp/>each<sp/>staff.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;humaux::StaffStateVariables&gt;<sp/>m_staffstates;</highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m_measureIndex<sp/>==<sp/>state<sp/>variable<sp/>for<sp/>keeping<sp/>track<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>current<sp/>measure<sp/>number<sp/>being<sp/>converted.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m_measureIndex;</highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m_harm<sp/>==<sp/>state<sp/>variable<sp/>for<sp/>keeping<sp/>track<sp/>of<sp/>whether<sp/>or<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>file<sp/>to<sp/>convert<sp/>contains<sp/>**mxhm<sp/>spines<sp/>that<sp/>should<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>converted<sp/>into<sp/>&lt;harm&gt;<sp/>element<sp/>in<sp/>the<sp/>MEI<sp/>conversion.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>m_harm<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="915"><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m_fing<sp/>==<sp/>state<sp/>variable<sp/>for<sp/>keeping<sp/>track<sp/>of<sp/>whether<sp/>or<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>file<sp/>to<sp/>convert<sp/>contains<sp/>**fing<sp/>spines<sp/>that<sp/>should<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>converted<sp/>into<sp/>&lt;fing&gt;<sp/>elements<sp/>in<sp/>the<sp/>MEI<sp/>conversion.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>m_fing<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m_string<sp/>==<sp/>state<sp/>variable<sp/>for<sp/>keeping<sp/>track<sp/>of<sp/>whether<sp/>or<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>file<sp/>to<sp/>convert<sp/>contains<sp/>**string<sp/>spines<sp/>that<sp/>should<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>converted<sp/>into<sp/>&lt;string&gt;<sp/>elements<sp/>in<sp/>the<sp/>MEI<sp/>conversion.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>m_string<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m_mens<sp/>==<sp/>state<sp/>variable<sp/>for<sp/>keeping<sp/>track<sp/>of<sp/>whether<sp/>or<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>file<sp/>to<sp/>convert<sp/>contains<sp/>**mens<sp/>spines<sp/>that<sp/>should<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>converted<sp/>into<sp/>mensuration<sp/>notation<sp/>staves.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>m_mens<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="930"><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m_fb<sp/>==<sp/>state<sp/>variable<sp/>for<sp/>keeping<sp/>track<sp/>of<sp/>whether<sp/>or<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>file<sp/>to<sp/>convert<sp/>contains<sp/>**Bnum<sp/>spines<sp/>that<sp/>should<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>converted<sp/>into<sp/>&lt;harm&gt;<sp/>element<sp/>in<sp/>the<sp/>MEI<sp/>conversion.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>m_fb<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m_fbstaff<sp/>==<sp/>state<sp/>variable<sp/>for<sp/>keeping<sp/>track<sp/>of<sp/>whether<sp/>or<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>particular<sp/>staff<sp/>(index)<sp/>has<sp/>figured<sp/>bass.<sp/><sp/>This<sp/>is<sp/>used<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>tuplet@place<sp/>parameter<sp/>to<sp/>avoid<sp/>collision<sp/>between<sp/>tuplet<sp/>numbers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>figured<sp/>bass.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;bool&gt;<sp/>m_fbstaff;</highlight></codeline>
<codeline lineno="941"><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m_fbstates<sp/>==<sp/>position<sp/>of<sp/>the<sp/>figured<sp/>bass<sp/>in<sp/>relation<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>each<sp/>staff<sp/>index.<sp/><sp/>0<sp/>=<sp/>no<sp/>figured<sp/>bass,<sp/>-1<sp/>=<sp/>figured<sp/>bass<sp/>below<sp/>staff,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>+1<sp/>=<sp/>figured<sp/>bass<sp/>above<sp/>staff.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>m_fbstates;</highlight></codeline>
<codeline lineno="946"><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m_setrightstem<sp/>==<sp/>used<sp/>for<sp/>setting<sp/>right-side<sp/>stem<sp/>of<sp/>half<sp/>notes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>m_setrightstem<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="949"><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m_leftbarstyle<sp/>is<sp/>a<sp/>barline<sp/>left-hand<sp/>style<sp/>to<sp/>store<sp/>in<sp/>the<sp/>next<sp/>measure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>processing<sp/>a<sp/>measure,<sp/>this<sp/>variable<sp/>should<sp/>be<sp/>checked<sp/>and<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>@left=&quot;style&quot;<sp/>for<sp/>the<sp/>measure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/>data_BARRENDITION<sp/>m_leftbarstyle;</highlight></codeline>
<codeline lineno="954"><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m_signifiers<sp/>==<sp/>a<sp/>list<sp/>of<sp/>user<sp/>defined<sp/>signfiers<sp/>in<sp/>**kern<sp/>spine<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>which<sp/>indicate<sp/>non-standard<sp/>**kern<sp/>parametesr<sp/>that<sp/>can<sp/>be<sp/>converted</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>into<sp/>notation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvrv_1_1_humdrum_signifiers" kindref="compound">HumdrumSignifiers</ref><sp/>m_signifiers;</highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m_multirest<sp/>==<sp/>boolean<sp/>states<sp/>to<sp/>keep<sp/>track<sp/>of<sp/>muti-rest<sp/>cases.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>m_multirest;</highlight></codeline>
<codeline lineno="962"><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m_sections<sp/>==<sp/>keep<sp/>track<sp/>of<sp/>thru<sp/>sections<sp/>and<sp/>1st/second<sp/>endings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;hum::HTp&gt;<sp/>m_sectionlabels;</highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m_numberlesslabels<sp/>==<sp/>The<sp/>last<sp/>section<sp/>label<sp/>without<sp/>a<sp/>number<sp/>at<sp/>the<sp/>end.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;hum::HTp&gt;<sp/>m_numberlesslabels;</highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m_endingnum<sp/>==<sp/>keep<sp/>track<sp/>of<sp/>current<sp/>ending.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m_endingnum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="971"><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m_currentending<sp/>==<sp/>keep<sp/>track<sp/>of<sp/>current<sp/>ending.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvrv_1_1_ending" kindref="compound">vrv::Ending</ref><sp/>*m_currentending<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="974"><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m_currentsection<sp/>==<sp/>keep<sp/>track<sp/>of<sp/>current<sp/>section.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvrv_1_1_section" kindref="compound">vrv::Section</ref><sp/>*m_currentsection<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="977"><highlight class="normal"></highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m_has_color_spine<sp/>==<sp/>true<sp/>if<sp/>a<sp/>color<sp/>spine<sp/>is<sp/>present.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>m_has_color_spine<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="980"><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m_spine_color<sp/>==<sp/>list<sp/>of<sp/>colors<sp/>to<sp/>apply<sp/>to<sp/>spine<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>first<sp/>dimension<sp/>is<sp/>the<sp/>spine/track<sp/>(staff),<sp/>and<sp/>second<sp/>is<sp/>subspine/subtrack<sp/>(layer).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::vector&lt;std::string&gt;&gt;<sp/>m_spine_color;</highlight></codeline>
<codeline lineno="984"><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m_traspose<sp/>==<sp/>transposition<sp/>to<sp/>go<sp/>from<sp/>sounding<sp/>to<sp/>written<sp/>pitch.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>m_transpose;</highlight></codeline>
<codeline lineno="987"><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>*kcancel<sp/><sp/><sp/><sp/><sp/>=<sp/>display<sp/>cancellation<sp/>key<sp/>signatures</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>*Xkcancel<sp/><sp/><sp/><sp/>=<sp/>do<sp/>not<sp/>display<sp/>cancellation<sp/>key<sp/>signatures<sp/>(default)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>m_show_cautionary_keysig<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="991"><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m_hasTremolo<sp/>==<sp/>true<sp/>if<sp/>there<sp/>is<sp/>a<sp/>*tremolo<sp/>found<sp/>in<sp/>input<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>m_hasTremolo<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="994"><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m_placement<sp/>==<sp/>placement<sp/>above/below<sp/>state<sp/>for<sp/>a<sp/>particular<sp/>spine<sp/>of<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>currently<sp/>used<sp/>for<sp/>**fb,<sp/>but<sp/>expand<sp/>to<sp/>other<sp/>spine<sp/>types<sp/>as<sp/>needed<sp/>(such<sp/>as<sp/>**harm).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>+1<sp/>=<sp/>*above<sp/>marker<sp/>encountered<sp/>in<sp/>spine.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-1<sp/>=<sp/>*below<sp/>marker<sp/>encountered<sp/>in<sp/>spine.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>0<sp/>=<sp/>*auto<sp/>neither<sp/>above<sp/>or<sp/>below<sp/>explicitly<sp/>given<sp/>(leave<sp/>up<sp/>to<sp/>renderer).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Up<sp/>to<sp/>1000<sp/>spines<sp/>can<sp/>be<sp/>processed<sp/>(see<sp/>constructor).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Indexed<sp/>by<sp/>track<sp/>number<sp/>of<sp/>the<sp/>spine<sp/>it<sp/>revers<sp/>to.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>m_placement;</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m_reverse<sp/>==<sp/>placement<sp/>reversed<sp/>or<sp/>not<sp/>reversed.<sp/><sp/>currently<sp/>used<sp/>for<sp/>**fb,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>might<sp/>be<sp/>useful<sp/>for<sp/>other<sp/>types<sp/>of<sp/>spines<sp/>in<sp/>the<sp/>fugure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>+1<sp/>=<sp/>*reverse<sp/>marker<sp/>encountered<sp/>in<sp/>spine.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>0<sp/>=<sp/>*Xreverse<sp/>marker<sp/>encountered<sp/>in<sp/>spine.<sp/>(or<sp/>default)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Up<sp/>to<sp/>1000<sp/>spines<sp/>can<sp/>be<sp/>processed<sp/>(see<sp/>constructor).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>m_reverse;</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"></highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m_absolute<sp/>==<sp/>use<sp/>relative<sp/>or<sp/>absolute<sp/>accidentals<sp/>in<sp/>**fb.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>+1<sp/>=<sp/>*absolute<sp/>marker<sp/>encountered<sp/>in<sp/>spine.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>0<sp/>=<sp/>*Xabsolute<sp/>marker<sp/>encountered<sp/>in<sp/>spine.<sp/>(default)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Up<sp/>to<sp/>1000<sp/>spines<sp/>can<sp/>be<sp/>processed<sp/>(see<sp/>constructor).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>m_absolute;</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m_slash<sp/>==<sp/>display<sp/>accidentals<sp/>as<sp/>slashes<sp/>or<sp/>as<sp/>accidentals<sp/>in<sp/>**fb.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>+1<sp/>=<sp/>*slash<sp/>marker<sp/>encountered<sp/>in<sp/>spine.<sp/>(default)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>0<sp/>=<sp/>*Xslash<sp/>marker<sp/>encountered<sp/>in<sp/>spine.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Up<sp/>to<sp/>1000<sp/>spines<sp/>can<sp/>be<sp/>processed<sp/>(see<sp/>constructor).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>m_slash;</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"></highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m_breaks<sp/>==<sp/>true<sp/>if<sp/>the<sp/>music<sp/>contains<sp/>encoded<sp/>page/system<sp/>breaks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>m_breaks<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m_nulls<sp/>==<sp/>true<sp/>if<sp/>the<sp/>line<sp/>only<sp/>contains<sp/>null<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;bool&gt;<sp/>m_nulls;</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"></highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m_duradj<sp/>==<sp/>duration<sp/>adjustments<sp/>due<sp/>to<sp/>the<sp/>presence<sp/>of<sp/>a<sp/>full</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>null<sp/>data<sp/>line.<sp/><sp/>Add<sp/>this<sp/>value<sp/>when<sp/>calculating<sp/>the<sp/>prespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>variable<sp/>in<sp/>fillContentsOfLayer().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;hum::HumNum&gt;<sp/>m_duradj;</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"></highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m_ignore<sp/>==<sp/>limit<sp/>conversion<sp/>range<sp/>of<sp/>data<sp/>(for<sp/>speeding<sp/>up<sp/>editing<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>larger<sp/>files).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;bool&gt;<sp/>m_ignore;</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m_clef_buffer<sp/>==<sp/>used<sp/>to<sp/>identify<sp/>clefs<sp/>that<sp/>should<sp/>not<sp/>be<sp/>printed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::tuple&lt;bool,<sp/>hum::HumNum,<sp/>Clef<sp/>*&gt;&gt;<sp/>m_clef_buffer;</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m_ftrem_slurs<sp/>==<sp/>used<sp/>to<sp/>store<sp/>ftrem-generated<sp/>slurs<sp/>for<sp/>later<sp/>insertion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>into<sp/>measure<sp/>element.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Slur<sp/>*&gt;<sp/>m_ftrem_slurs;</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m_group_name<sp/>==<sp/>used<sp/>to<sp/>store<sp/>group<sp/>names,<sp/>such<sp/>as<sp/>*I&quot;&quot;trumpets</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;int,<sp/>string&gt;<sp/>m_group_name;</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m_group_name_tok<sp/>==<sp/>used<sp/>to<sp/>store<sp/>group<sp/>names,<sp/>such<sp/>as<sp/>*I&quot;&quot;trumpets</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;int,<sp/>hum::HTp&gt;<sp/>m_group_name_tok;</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m_group_abbr<sp/>==<sp/>used<sp/>to<sp/>store<sp/>group<sp/>abbreviations,<sp/>such<sp/>as<sp/>*I&quot;&quot;trps.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;int,<sp/>string&gt;<sp/>m_group_abbr;</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m_group_abbr_tok<sp/>==<sp/>used<sp/>to<sp/>store<sp/>group<sp/>abbreviations,<sp/>such<sp/>as<sp/>*I&quot;&quot;trps.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;int,<sp/>hum::HTp&gt;<sp/>m_group_abbr_tok;</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m_scordatura_marker<sp/>==<sp/>used<sp/>to<sp/>identify<sp/>scordatura<sp/>notes<sp/>for<sp/>transposition<sp/>to<sp/>written<sp/>pitch.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>m_scordatura_marker;</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"></highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m_scordatura_transposition<sp/>==<sp/>used<sp/>to<sp/>transpose<sp/>scordatura<sp/>notes;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;hum::HumTransposer<sp/>*&gt;<sp/>m_scordatura_transposition;</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"></highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m_humtype<sp/>==<sp/>input<sp/>option<sp/>boolean<sp/>to<sp/>include<sp/>extra<sp/>@type<sp/>information<sp/>that<sp/>will</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>be<sp/>converted<sp/>into<sp/>@class<sp/>in<sp/>SVG<sp/>conversion.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m_humtype<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"></highlight></codeline>
<codeline lineno="1067"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>NO_HUMDRUM_SUPPORT<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>vrv</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal"></highlight></codeline>
<codeline lineno="1072"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>__VRV_IOHUMDRUM_H__</highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/verovio/verovio/include/vrv/iohumdrum.h"/>
  </compounddef>
</doxygen>
